
RCS file: /cvs/xconq/xconq/kernel/read.c,v
Working file: read.c
head: 1.53
branch:
locks: strict
access list:
symbolic names:
	xconq-7_4_1-release: 1.30
	xconq-7_4-branch: 1.30.0.2
	xconq-7_4-branchpoint: 1.30
	xtconq-pre-removal: 1.20
	xconq-7_3_3-release: 1.16
	xconq-7_3_2-release: 1.16
	xconq-7_3_1-release: 1.16
	xconq-7_3-branch: 1.16.0.2
	xconq-7_3-branchpoint: 1.16
keyword substitution: kv
total revisions: 53;	selected revisions: 53
description:
----------------------------
revision 1.53
date: 2004/08/19 00:58:57;  author: ronne;  state: Exp;  lines: +5 -1
Many bug fixes, some new features.
----------------------------
revision 1.52
date: 2004/08/06 17:43:14;  author: ronne;  state: Exp;  lines: +1 -1
Fix save/restore of indepside ai.
----------------------------
revision 1.51
date: 2004/07/18 18:49:48;  author: ronne;  state: Exp;  lines: +13 -3
Add support for multiple and unique unit images.
----------------------------
revision 1.50
date: 2004/07/16 00:35:42;  author: ronne;  state: Exp;  lines: +1 -1
Improve the blurb code.
----------------------------
revision 1.49
date: 2004/07/06 02:43:59;  author: mcdonald;  state: Exp;  lines: +9 -9
Disable another compiler warning.
Clean up a horde of warnings.
----------------------------
revision 1.48
date: 2004/04/25 04:12:59;  author: mcdonald;  state: Exp;  lines: +3 -0
Fix "runaway creation spree" bug.
Fix harmless build glitch which allowed more CP than max.
Partially fix misdirected builds.
----------------------------
revision 1.47
date: 2004/03/10 20:39:18;  author: ronne;  state: Exp;  lines: +15 -0
Fix read warnings from internal zz data.
----------------------------
revision 1.46
date: 2003/12/14 03:37:47;  author: ronne;  state: Exp;  lines: +3 -0
Add support for network games in file saving code.
----------------------------
revision 1.45
date: 2003/12/01 01:20:24;  author: ronne;  state: Exp;  lines: +4 -1
Make it possible to save/restore network games.
----------------------------
revision 1.44
date: 2003/11/30 23:31:01;  author: mcdonald;  state: Exp;  lines: +0 -6
Make the Xconq apps compile with strict ANSI C compliance.
----------------------------
revision 1.43
date: 2003/10/18 16:59:40;  author: ronne;  state: Exp;  lines: +49 -1
Overhaul of material handling code.
----------------------------
revision 1.42
date: 2003/08/18 20:13:41;  author: ronne;  state: Exp;  lines: +1 -1
Various cleanups and bug fixes.
----------------------------
revision 1.41
date: 2003/06/18 20:46:36;  author: ronne;  state: Exp;  lines: +1 -1
Fix restore of saved unit views.
----------------------------
revision 1.40
date: 2003/05/01 19:20:27;  author: ronne;  state: Exp;  lines: +17 -1
Rewrite and improve unit view code.
----------------------------
revision 1.39
date: 2003/04/26 16:03:17;  author: ronne;  state: Exp;  lines: +1 -1
Improve struct UnitView and clean out obsolete macros.
----------------------------
revision 1.38
date: 2003/02/25 23:25:14;  author: ronne;  state: Exp;  lines: +8 -0
Comment out agreement code. Fix some bugs.
----------------------------
revision 1.37
date: 2002/12/30 20:58:20;  author: ronne;  state: Exp;  lines: +2 -1
Expurgate wrapx from the interfaces.
----------------------------
revision 1.36
date: 2002/08/30 01:33:20;  author: ronne;  state: Exp;  lines: +4 -1
Save and restore current advances.
----------------------------
revision 1.35
date: 2002/05/08 23:51:17;  author: ronne;  state: Exp;  lines: +27 -23
Make sources C++ compatible.
----------------------------
revision 1.34
date: 2001/01/23 16:36:53;  author: shebs;  state: Exp;  lines: +1 -1
	Eliminate a few minor warnings, minor tweaks.
	* plan.c (plan_offense_support, plan_explorer_support): Remove
	unused locals.
	* read.c (interp_unit_defaults): Remove unused local m.
	* tkcmd.c (do_fire): Removed unused local rslt.
	* tkconq.h, tkmain.c (init_all_display): Make static.
	* tkinit.c (toplevel_display_used): Remove unused global.
	(report_missing_images): Report correct side for emblems.
	(init_other_images): Fix debug reports.
	* tkmain.c (update_mouseover): Use unit_could_attack, remove
	copy of could_attack.
----------------------------
revision 1.33
date: 2001/01/08 16:24:40;  author: shebs;  state: Exp;  lines: +2 -2
	Add an SDL-based user interface.
	* sdl/: New directory.
	* sdl/Makefile.in, sdl/sdlconq.h, sdl/sdlcmd.c, sdl/sdlimf.c,
	sdl/sdlinit.c, sdl/sdlmain.c, sdl/sdlmap.c: New files.
	* images/cursor.bmp: New file, color cursor.
	* Makefile.in (SUBDIRS): Add sdl.
	(all-sdlconq): New target.
	* configure.in: Add option --enable-sdl.
	* configure: Regenerate.
	* x11/Makefile.in (sdlconq): New target.

	* system.h, mac.c, unix.c, win32.c (default_images_pathname): Add
	argument, use instead of compiled-in pathname.
	* init.c (init_library_path): Change caller.

	* imf.h (Image r, g, b): Solid color for an image.
	* imf.c (blacken_masked_area, blacken_mono_masked_area) Move to
	here from tkimf.c, add rgb args.
	(make_raw_palette): Move to here from tkimf.c.

	* ui.c. ui.h (dside): Define here instead of in each interface.
	(generic_transition): Similarly.
	(compute_x1_len): Move to here from tkmap.c.
	* macconq.c, macconq.h (dside): Remove.
	* macinit.c (generic_transition): Remove.
	* tkmain.c, tkconq.h (dside): Remove.
	* tkinit.c, tkmap.c (generic_transition): Remove.
	* cconq.c, cconq.h (dside): Remove.

	* tkcmd.c (require_unit): Test for NULL map.
	(get_selected_units): Similarly.
	(do_follow_action, do_message, do_quit, do_set_view_angle,
	do_survey, do_design): Similarly.
	* tkimg.c (tk_interp_image_1): Fill in generic image rgb,
	* tkmap.c (draw_current): Fix test for health bar color change.
	(draw_side_emblem): Draw black border around solid-color emblem.

	* ui.c (favored_type): Use unit_can_build_type.

	* read.c (interp_unit_defaults): Fix setup of default tooling.
----------------------------
revision 1.32
date: 2000/12/21 14:41:34;  author: shebs;  state: Exp;  lines: +4 -6
	Fix problems resulting from the last change.
	* game.h (DONE, NOADVANCE): Assign values different from NONATYPE.
	(NOUNIT): Remove, never used.
	* side.h (has_advance): Use DONE.
	* world.h (NOUSER): Move to here, set to 0.
	* world.c (allocate_area_users): Remove memset of layer.
	* generic.c (init_types): Remove unused debug print.
	(create_unit_type): Make array resizing work.
	(create_material_type, create_terrain_type, create_advance_type):
	New functions.
	* read.c (interp_mtype, interp_ttype, interp_atype): Use them.
	* run.c (apnbt_types): New static global.
	(auto_pick_new_build_task): Use it instead of tmp_u_array.

	* PROJECTS: Remove MAXUTYPES project.
----------------------------
revision 1.31
date: 2000/12/18 16:50:48;  author: shebs;  state: Exp;  lines: +66 -113
	Eliminate the macros MAXUTYPES, MAXTTYPES, MAXMTYPES, and
	MAXATYPES, size all type handling dynamically.
	* config.h (MAXUTYPES, MAXTTYPES, MAXMTYPES, MAXATYPES): Remove.
	* game.h (NONUTYPE, NONTTYPE, NONMTYPE, NONATYPE): Define to be -1.
	(count_terrain_subtypes, numcelltypes, numbordtypes, numconntypes,
	numcoattypes): Declare here instead of in world.h.
	(tmp_u_array, tmp_t_array): Declare.
	* gvar.def (edge-terrain, river-sink-terrain): Don't use type
	bounds.
	* table.def (adjacent-terrain-effect, terrain-exhaustion-type): Ditto.
	* utype.def (obsolete, wrecked-type): Ditto.
	* generic.c (count_terrain_subtypes, numcelltypes, etc): Move here
	from world.c.
	(tmp_u_array, tmp_t_array): New globals.
	(curmaxutypes, curmaxmtypes, curmaxttypes, curmaxatypes): Set to
	defaults convenient for the first allocation.
	(create_unit_type): New function.
	(disallow_more_unit_types, disallow_more_terrain_types): New functions.
	(allocate_table): Use them.
	* help.c (tm_table_row_desc): Remove, never used.
	* init.c (check_game_validity): Call disallow_* to make sure
	some type arrays are computed and cached.
	(calculate_globals): Ditto.
	(make_initial_materials): Use tmp_t_array.
	* mkrivers.c (make_up_river_borders): Ditto.
	* mkterr.c (elev_range, elev_lo, elev_hi, raw_range, raw_lo,
	raw_hi): New static globals.
	(compose_area, compose_earthlike_area): Use them.
	(make_random_terrain, fix_adjacent_terrain,
	flatten_liquid_terrain): Use tmp_t_array.
	* mkunits.c (make_countries): Dynalloc local arrays.
	(country_is_complete, make_independent_units): Use tmp_u_array.
	* nlang.c (ohd_nums, ohd_incomplete): New static globals.
	(others_here_desc, occupants_desc): Use them.
	* plan.c (plan_colonize_support): Use tmp_u_array.
	(gctc_supply): New static global.
	(good_cell_to_colonize): Use it.
	* ps.c (summary_of_seen_units_at): Use tmp_u_array.
	* read.c (default_supply): Remove, no longer to use.
	(init_predefined_symbols): Remove its setup.
	(interp_unit_default): Similarly.
	(interp_unit): Don't use default_supply.
	(interp_utype): Remove test for too many types, call
	create_unit_type.
	(interp_ttype, interp_mtype, interp_atype): Remove tests
	for too many types.
	(too_many_types): Remove, no longer needed.
	(rd_u_arr): New static global.
	(interp_standing_order, read_utype_doctrine): Use it.
	* run.c (rau_incrs): New static global.
	(run_advanced_units): Use it.
	(apr_type): New static global.
	(auto_pick_unit_research, auto_pick_side_research): Use it.
	(auto_pick_new_build_task): Use tmp_u_array.
	* run2.c (ttotals, uttotals): New static globals.
	(run_economy): Use them.
	* score.c (sum_property): Use tmp_u_array.
	* side.c (new_doctrine): Call disallow_more_unit_types.
	* supply.c (mad): New static global.
	(init_supply_system): Set it up.
	* unit.c (create_unit): Allocate numlivebytype and completenesses.
	(oc_numtypes): New static global.
	(can_occupy_unit): Use it.
	(toc_numtypes, type_can_occupy_cell): Similarly.
	(ocw_numtypes, can_occupy_cell_without): Similarly.
	(tocw_numtypes, type_can_occupy_cell_without): Similarly.
	(conn_num_types, can_occupy_conn_1): Similarly.
	(can_carry, type_can_occupy): Use tmp_u_array.
	(num_each_type, shared_each_type): New static globals.
	(eject_excess_occupants): Use them.
	(shortest_unique_name): Dynalloc firstuniq, use it as flag
	instead of shortestdone.
	(shortest_generic_name): Similarly.
	* write.c (write_table): Increase histogram size.

	* ai.c (atc_type): New static global.
	(assign_to_colonize): Use it.
	(pbt_prefs, pbt_fringe_terrain, pbt_enemy_types,
	pbt_num_to_transport): New static globals.
	(preferred_build_type): Use them.
	* ai.h (Strategy): Declare strengths etc as arrays of pointers
	instead of 2D arrays, unitlist and unitlistcount as pointers.
	(Theater): Similarly for numassigned, numneeded, etc.
	(strength_est, etc): New macros (not used yet).
	* iplayer.c (iru_numoffensive, iru_numdefensive): New static globals.
	(iplayer_review_units): Use them.
	* mplayer.c (mplayer_create_strategy): Allocate strength arrays.
	(create_theater): Dynalloc numassigned etc fields.
	(estimate_strengths, mplayer_read_strengths, mplayer_save_state):
	Change to pointer-to-pointer refs.
	(mru_numoffensive, mru_numdefensive): New static globals.
	(mplayer_review_units): Use them.
	* oplayer.c: Similarly.

	* cmd.c (gt_amts, gt_rslts): New static globals.
	(do_one_give, do_one_take): Use them.
	* ui.h (VP draw_materials): Make into a pointer.
	* ui.c (new_vp): Allocate draw_materials field.

	* maccmd.c (do_one_add_terrain): Use tmp_t_array.
	* macwins.c (side_research_dialog): Make participants static global.

	* tkconq.h (UI material_color, etc): Change from array to pointer.
	(UI cell_color, cell_shades): Rename from cellcolor and cellshades.
	(UI best_timages): Similarly.
	(UI unitpics, unitmasks, bestmimages): Remove, not used.
	(Map uvec, ustr, tvec, tstr): Change from array to pointer.
	* tkcmd.c (do_add_terrain, do_remove_terrain): Use tmp_t_array.
	(do_build): Use tmp_u_array.
	* tkinit.c (utype_indexes, mtype_indexes): Change to pointers.
	(init_display): Remove inits of unused fields, alloc space for
	cell_shades and material_color.
	(init_material_images): Remove setup of bestmimages.
	(init_terrain_images): Allocate for best_timages and terrpics.
	(init_shades): Use array-of-array refs to cell_shades.
	* tkmain.c (last_num_units_in_play, last_num_units_incomplete):
	Change from arrays to pointers.
	(init_redraws, update_unit_type_list): Allocate them.
	(create_map): Alloc map uvec, ustr, etc.
	* tkmap.c: Update refs to renamed fields.
	(MapW draw_aux_terrain, draw_materials): Make into pointers.

	* ccmd.c (do_build): Use tmp_u_array.
	* cconq.c (init_display): Use numutypes to size allocs.
	(ask_unit_type, ask_terrain_type): Use array of int instead of short.
	* cdraw.c (draw_type_list_entry): Init lasttypevisible from numutypes.

	* cconq.c (do_dir_2): Fix a variable name.
	* cconq.h: Use #else instead of #elif.
----------------------------
revision 1.30
date: 2000/11/16 23:33:12;  author: ronne;  state: Exp;  lines: +420 -8
General cleanup of kernel prototypes - part 2.
----------------------------
revision 1.29
date: 2000/11/12 00:39:54;  author: ronne;  state: Exp;  lines: +64 -2
General cleanup of kernel prototypes - part 1.
----------------------------
revision 1.28
date: 2000/10/25 13:46:46;  author: shebs;  state: Exp;  lines: +0 -13
	Remove useless program-version property of modules.
	* keyword.def (program-version): Remove.
	* module.h (Module programversion): Remove.
	* read.c (interp_game_module): Remove handling.
	* write.c (write_game_module): Remove save.
	* all.g, warn.g: Remove references.
	* refman.texi: Remove description, also improve info about
	default-base-module and area restrictions.
----------------------------
revision 1.27
date: 2000/10/14 17:49:54;  author: shebs;  state: Exp;  lines: +2 -9
	Eliminate pointless unit extension property, make unit's possible
	sides list into a regular property.
	* unit.h (UnitExtras hook): Replace with field sides.
	(unit_hook): Remove.
	(unit_sides): Define.
	* unit.c (init_unit_extras): Init sides.
	(get_x_property, get_x_property_by_name): Remove.
	* read.c (default_unit_hook): Remove.
	(interp_unit_defaults): Remove K_X case.
	(interp_unit): Similarly, and add K_SIDES case.
	* mkunits.c (add_preexisting_units): Use it.
	* write.c (write_unit_properties): Write sides instead of hook.

	* nat-names.g: Remove useless units properties.
	* u-e1-1998.g, u-e50-1998.g: Change "x" props to "sides".

	* refman.texi: Update manual.
----------------------------
revision 1.26
date: 2000/10/13 16:47:36;  author: shebs;  state: Exp;  lines: +20 -16
	Make variants' defaults show up correctly in tcl/tk interface.
	* read.c (interp_variant_defns): Evaluate default before testing.
	* tkmain.c (interpret_variants): Pass correct value to
	update_variant_setting.
----------------------------
revision 1.25
date: 2000/10/06 15:53:49;  author: shebs;  state: Exp;  lines: +21 -13
	* side.h (Side numadvances): Remove field, never used.
	* side.c (create_side): Don't set.
	* read.c (fill_in_side): Don't interpret numadv.
	(interp_unit_plan): Make creation turn optional as documented.
	(interp_task): Be more flexible about syntax.
	* write.c (write_side_properties): Don't write side->numadvances.
	* table.def (hp-on-completion): Remove, never used.

	* mkunits.c (make_independent_units): Add a comment.
----------------------------
revision 1.24
date: 2000/10/01 17:49:46;  author: shebs;  state: Exp;  lines: +0 -15
	* keyword.def (any): Remove keyword, redundant with "or" in namers.
	(text): Remove, never used.
	* lisp.c (hash_name): Hash on whole string, handle 8-bit chars
	correctly.
	* mknames.c (gen_name): Add comments.
	(gen_from_rule): Rewrite to handle reject form, issue better
	warnings.
	* read.c (init_predefined_symbols): Don't make K_REJECT eval to
	self.
	(interp_text_generator): Remove, never used.
	(interp_form): Remove call to it.

	* refman.texi: Update documentation of name grammars to reflect
	the actual code.

	* warn.g: Add tests for new grammar warnings.
----------------------------
revision 1.23
date: 2000/09/10 13:59:59;  author: shebs;  state: Exp;  lines: +16 -42
	Remove named palettes, unused and un-useful.
	* imf.c, imf.h (interp_palette, new_image_palette,
	canonical_palette_name, get_imp, find_imp, write_imp): Remove.
	(write_palette_contents): Remove named palette case.
	(interp_imf_form): Remove call to interp_palette.
	* read.c (interp_form): Ditto.

	* refman.texi: Remove references to named palettes.
----------------------------
revision 1.22
date: 2000/09/10 05:45:40;  author: shebs;  state: Exp;  lines: +34 -3
	Random rewrites and reorgs resolving remote networking bugs.
	* ai.c (init_ai): Fill in side->rai for remote AIs.
	(set_side_ai): Simplify, and add feedback on results.
	(run_local_ais, run_ai_plan_adjust): Move here from run.c,
	test taskexecs instead of need_ai_task_reaction.
	* cmd.c (do_ai_side): Fix player feedback to reflect that
	network roundup may be necessary before state changes.
	* cmdline.c (option_width, option_height, option_circumference):
	New globals.
	(parse_world_option): Set these instead of pushing a variant.
	(set_variants_from_options): Call net_set_variant_value instead
	of pushing variant settings.
	(find_variant_from_name): New function.
	* init.c (start_player_pre_setup_stage): Call do_module_variants.
	(final_init): Report more data structure sizes.
	* kernel.h (set_variant_value): Declare.
	* kpublic.h (net_set_variant_value): Declare.
	* module.h (Variant newvalues): New field, array of new settings
	for variant.
	* module.c (create_game_module): Store a copy of the module name.
	(set_variant_value): Move here from tkmain.c.
	(do_one_variant): Fill from newvalues fields.
	* read.c (interp_variant_defns, add_std_var): Fill in newvalues
	fields.
	* run.c (latest_action_x, latest_action_y): New globals.
	(num_local_ais): Move to ai.c.
	(need_ai_task_reaction): Remove, use taskexecs instead.
	(save_run_state, clear_task_outcomes): New functions.
	(run_game): Call them.
	(move_one_unit_multiple): Replace need_ai_task_reaction test
	with last_task_outcome and AI usage test.
	(run_side_research, run_construction): Test local AI instead
	of AI in general (dubious).
	* side.h (Side rai): New field.
	(side_has_ai): Test both local and remote AI.
	(side_has_local_ai): New macro.
	* task.c (execute_task): Rework recording of task outcome.
	* tp.h (RAI): New struct, placeholder "remote AI".
	* tp.c: Change run warnings into notices.
	(net_set_variant_value): New function.
	(receive_variant_settings): Allow at most three values.
	* write.c (write_side_properties): Only write AI state for
	local AIs (dubious).

	* tkconq.tcl: Rewrite variant handling to do more work in
	kernel.
	(set_variant_value_cmd): New proc, replaces broadcast_variant_value.
	(set_variants): Do less.
	(add_world_size_dialog_items): Comment out lat/lon items.
	(insert_chat_string): Test for existence of window before insert.
	* tkmain.c: Rewrite for variants also.
	(send_value_value, implement_variants): Remove tcl commands.
	(tk_set_variant_value): Rewrite to pass along to kernel.
	(interpret_variants): Rewrite.
	(set_variant_world_size, set_variant_real_time): Remove,
	handled uniformly in kernel.
	(update_variant_setting): Rewrite.
----------------------------
revision 1.21
date: 2000/09/03 22:52:27;  author: shebs;  state: Exp;  lines: +22 -43
	* actions.c, read.c, unit.c: Use more new-style function defns.
	* run.c: Add some comments.
	* run2.c: Remove unused decls.
	* world.c, world.h (compute_elevation_bounds): New function, split
	out from final_init_world.
	* read.c (fill_in_elevations): Call it.
	* write.c (write_area_elevations): Change to write only
	nonnegative values.
----------------------------
revision 1.20
date: 2000/08/08 17:11:52;  author: shebs;  state: Exp;  lines: +15 -11
	* nlang.c (tooling_desc): New function.
	(notify_doctrine): List contents of all doctrines.
	(notify_doctrine_1): List construction run lengths.
	* plan.c (est_completion_time): Move to here from nlang.c.
	* read.c (read_default_doctrine): Rename from read_general_doctrine,
	don't try to handle property values here.
	(read_utype_doctrine): Similarly.
	(utype_from_name): Handle empty strings.
	* read2.c (interp_utype_list): Move to here from unit.c.
	* side.h (Side numlive): Remove field, never used.
	(for_all_doctrines): New macro.
	* side.c (init_sides): Set next_doctrine_id to 1, so save/restore
	doesn't get confused.
	(create_side): Don't alloc space for numlive.
	(become_designer): Don't enable may_set_show_all if see_all.
	(cover_area): Test side->see_all instead of g_see_all.
	(new_doctrine): Ensure new doctrine has unique id.
	(clone_doctrine): Comment out, never used.
	* unit.c (set_unit_side): Remove adjust of numlive.
	(find_unit_name): Remove, unused and useless.
	(num_occupants, num_units_at, get_x_property_by_name): Comment
	out, never used.
	* write.c: Cosmetic improvements.
	* conq.h, unit.h: Update to reflect movements.
----------------------------
revision 1.19
date: 2000/08/01 16:17:13;  author: shebs;  state: Exp;  lines: +2 -2
	Use a hash table for unit views.
	* side.h (Side unit_views): Declare as pointer to pointer.
	* side.c (VIEW_HASH_SIZE): New macro.
	(init_view): Allocate hash table.
	(unit_view_at, add_unit_view, remove_unit_view): Use hash table.
	(add_unit_view_raw): New function.
	* read.c (interp_unit_views): Call it.
	* write.c (write_side_view): Iterate over area to find unit views.
----------------------------
revision 1.18
date: 2000/07/05 16:20:06;  author: shebs;  state: Exp;  lines: +63 -50
	* run2.c, conq.h (area_lighting): New global.
	(daynight): Change to int.
	* keyword.def (unit-views): New keyword, replaces unit-view.
	* table.def (see-chance, etc): Remove upper bounds on values.
	* read.c (interp_unit_views): New function.
	(fill_in_side): Call it.
	* run2.c (compute_season): Add day/night note to curdatestr.
	(run_sun): Recognize when area's lighting is uniform, tell
	users about rising and setting of sun, also recompute cover.
	* side.c (suppress_see_cell): New global.
	(cover_area_1): Use it to skip see_cell calls sometimes.
	(reset_coverage): Set it.
	(calc_coverage): Simplify, account for controlled sides.
	(see_cell): Rewrite see-chance handling.
	(test_for_successful_viewer): Rename from test_for_viewer.
	(test_for_possible_viewer): Rename from test_for_mistaken_viewer.
	* write.c (write_side_view): Use new keyword.
----------------------------
revision 1.17
date: 2000/07/03 16:43:37;  author: shebs;  state: Exp;  lines: +2 -4
	Change unit viewing to use view objects instead of a layer.
	* unit.h (UnitView): New struct.
	* side.h (Side unitview, unitviewdate): Remove.
	(Side unit_views): New field.
	(for_all_view_stack): New macro.
	(unit_view, set_unit_view, builduview, vside, vtype, vhp, EMPTY,
	appears_empty, vside_indep, unit_view_date, set_unit_view_date):
	Remove, no longer used.
	* config.h (MAXVIEWHISTORY): Remove, no longer used.
	* side.c (init_view): Remove unit view layer init.
	(unit_view_at, unit_view_next, add_unit_view, remove_unit_view,
	mistake_view): New functions.
	(fn_set_unit_view, fn_set_unit_view_date): Remove.
	(side_sees_image, all_see_leave, reset_all_views,
	react_to_seen_unit, see_cell, see_exact, paint_view_1): Rewrite to
	use view objects.
	* ai.c (enemies_present): Ditto.
	* iplayer.c (preferred_build_type): Ditto.
	* mkroads.c (unit_sees_other_unit): Ditto.
	* mplayer.c (review_theaters, estimate_strengths,
	preferred_build_type): Ditto.
	* plan.c (alternate_target_here, victim_here, target_here,
	indep_captureable_here, useful_captureable_here,
	can_capture_neighbor): Ditto.
	* ps.c (sideno_of_seen_unit_at): Ditto.
	* run2.c (unit_revolt, visible_to): Ditto.
	* task.c (target_visible): Ditto.
	* ui.c (oneliner, dump_text_view
	* cdraw.c (draw_units, draw_legend, show_closeup): Ditto.
	* xdraw.c (draw_map_info, etc): Ditto.
	* macdesign.c (apply_designer_tool): Ditto.
	* macrow.c (draw_units): Ditto.
	* tkmain.c (update_mouseover): Ditto.
	* tkmap.c (draw_units, handle_designer_mouse_down): Ditto.
	(x_xform_unit_view): New function.

	* init.c (init_all_views): Fold in init_view_2, comment out
	unit view clearing.
	* plan.c (threat, usable_cell): Comment out, not used apparently.
	* read.c (fill_in_side): Comment out unit view reading.
	* ui.c, ui.h (xform_unit_view_: New function.
	(utype_seen_at): Comment out unit view case.
	* write.c (fn_unit_view, fn_unit_view_date): Remove.
	(write_side_view): Write unit view list instead of layer.

	* cmdline.h (make_default_player_spec): Move decl to here
	from cmdline.c.
	* skelconq.c, wconq.c, xconq.c, xtconq.c, xtmain.c: Remove decls
	that are in cmdline.h.
	* tkmain.c: Ditto, and include cmdline.h.
	* cconq.c (make_default_player_spec): New function.

	* tkmain.c (tk_reset_popup_flag): New tcl command.

	* nlang.c (medium_long_unit_handle): Remove unused local.
----------------------------
revision 1.16
date: 2000/06/04 16:19:03;  author: shebs;  state: Exp;  lines: +75 -252
	More rewriting of variant handling and player setup.
	* keyword.def (indepside-has-ai, indepside-can-build,
	indepside-can-research, indepside-has-treasury): Comment out,
	will no longer define as variants.
	* ai.c, ai.h (next_ai_type_name): Rename from next_ai_type.
	(find_ai_type): New function.
	* cmdline.c (unixify_variant_name): Remove.
	(game_usage_info): Use variant ids as argument names.
	* kernel.h (set_ai_for_player, etc): Move here from conq.h.
	* init.c (make_up_a_side): Remove set of ingame, redundant.
	(set_ai_for_player): Warn about invalid AI types.
	* iplayer.c, mplayer.c: Remove decls now in ai.h.
	* kpublic.h: Rearrange some decls.
	* module.c (do_one_variant): Remove indepside variants.
	* read.c (force_all_variants): New global.
	(add_std_var): New function.
	(interp_variant_defns): Rewrite to use it for all variant
	setup.
	(add_more_variants): Remove, no longer needed.
	(interp_game_module): Call interp_variant_defns.
	* run.c (init_movement): Simplify code.
	* score.c (eval_sk_last_side_wins, eval_sk_last_alliance_wins):
	Don't require indepside to lose.
	(record_into_scorefile): Use a switch statement for variants.
	(score_variant_desc): Remove indepside variants.

	* macinit.c (interpret_variants, implement_variants): Remove
	indepside variants.
	(hit_player_setup_dialog): Use net_exchange_players.

	* tkconq.tcl (add_variants_dialog_items): Wrap help text by
	words.
	(add_player_dialog_items): Always create indepside entry but
	conditionalize packing, add indepside button, improve test of
	random/sidelib name button enabling.
	(popup_indepside, ok_indepside): New procs.
	* tkinit.c (init_display): Seed indepside globals.
	* tkmain.c (tk_set_indepside_options): New tcl command.
	(tk_set_ai_for_player): Interpret AI name passed directly.
	(interpret_variants): Remove indepside variants.
----------------------------
revision 1.15
date: 2000/06/01 14:38:50;  author: ronne;  state: Exp;  lines: +6 -2
add_more_variants: comment out indepside stuff.
----------------------------
revision 1.14
date: 2000/05/30 15:44:37;  author: shebs;  state: Exp;  lines: +61 -49
	Add help strings for variants.
	* module.h (Variant help): New field.
	* read.c (interp_variant_defns): Fill it in, supply default
	help strings for standard variants.
	(add_more_variants): Comment out people and supply system
	variants, they don't work.
	* cmdline.c (game_usage_info): Use help strings.

	* tkconq.tcl: Say "config" instead of "configure" consistently.
	(show_variant_help): Use varianthelp global.
	* tkmain.c (interpret_variants, interpret_checkbox): Set up
	tcl global varianthelp.

	* magellan.g, panzer.g, standard.g, ww2-eur-42.g: Add help
	strings to variants.

	* refman.texi: Update reference manual.

	* tkmain.c (play_movies): Slow down nuke movie.
----------------------------
revision 1.13
date: 2000/04/02 23:35:12;  author: shebs;  state: Exp;  lines: +13 -17
	* read.c, side.c, unit.h, write.c: Cosmetic changes.
	* iplayer.c: Remove unused code.
----------------------------
revision 1.12
date: 2000/03/17 17:05:49;  author: shebs;  state: Exp;  lines: +2 -1
	* keyword.def (non-advance): New keyword.
	* read.c (init_predefined_symbols): Set it up as a constant.
----------------------------
revision 1.11
date: 1999/10/30 14:41:46;  author: shebs;  state: Exp;  lines: +0 -7
        * combat.c (mobile_enemy_thread): Use side_sees_image instead of
        unit_actually_visible.
        * run.c (auto_pick_new_build_task, etc): Ditto.
        * task.c: Ditto.
        * side.c (side_sees_unit): Add side->see_all case, remove
        designer and debugging cases.
        (side_sees_image): Error if NULL side, add view-matching case.
        * ui.c (unit_actually_visible): Comment out.
        (unit_visible, occupants_visible): New function.
        (cell_terrain): Remove, fold code into oneliner.
        (oneliner): Test vp->show_all.
        * ui.h: Declare new functions.

        * conq.h (gameinited, warnings_logged): Declare.
        (add_remote_players, etc): Ditto.
        * cmd.c, cmdline.h, init.c, read.c, read2.c, side.c, unit.c,
        util.c: Remove unneeded decls.
        * misc.h (log_warning): Declare.
----------------------------
revision 1.10
date: 1999/10/26 15:32:09;  author: shebs;  state: Exp;  lines: +3 -5
        Reorganize see-all handling, add separate concept of show-all
        that only affects display.
        * side.h (Side show_all): New field.
        (Side may_set_show_all): Rename from may_set_see_all.
        * ui.h (VP show_all): Rename from see_all.
        * init.c (init_all_views): Use new field, don't set all_see_all.
        * actions.c, ai.c. combat.c, mplayer.c, nlang.c, plan.c, ps.c,
        read.c, run.c, run2.c, score.c, side.c, side.h, ui.c, unit.c,
        write.c: Use g_see_all() or side->see_all instead of all_see_all,
        side->may_set_show_all instead of side->may_set_see_all.
        * macconq.c, macdesign.c, macmap.c, macmouse.c, macrow.c: Ditto.
        * tkcmd.c, tkmain.c, tkmap.c: Ditto.
        * xcmd.c, xmap.c, xtmain.c: Ditto.
        * run.c (end_the_game): Set side->show_all.
        * side.c (become_designer, become_nondesigner): Ditto.

        * tkcmd.c (aux_design, really_do_design): Call set_show_all and
        update_show_all_info.
        * tkconq.tcl (may_set_show_all): Rename from may_set_see_all.
        (default_map_options): New global array, use everywhere instead
        of map_options.
        (map_options): Index by map widget also.
        (update_view_controls_info): Don't set may_set_show_all.
        (update_show_all_info, update_show_all): New procs.
        * tkinit.c (init_display): Update show_all info.
        * tkmain.c (update_turn_display): Set show_all.
        * tkmap.c (m_terrain_visible, m_units_visible): New macros, use
        everywhere.
        (set_show_all): New function.

        * combat.c (do_overrun_action): Fix call to do_fire_at_action
        to not shoot at self(!).

        * side.c (paint_view_1): Add special case to do exact view.

        * unix.c (score_file_pathname): Look for env var XCONQ_SCORES
        instead of XCONQSCORES.

        * tkconq.h (UI told_outcome): Remove, never used.
        * tkmain.c (told_outcome): Make static local.
        * tkconq.tcl (disable_move_mode): New proc.
        (popup_game_over_dialog): Use it.
        (popup_design_palette): Add view painting button.
        (make_view_paint_frame): New proc.
        (make_terrain_paint_frame): Increase size of terrain samples.
        (make_people_paint_frame, make_control_paint_frame): Turn on
        people/control display in all maps.
        * tkinit.c (init_bitmaps): Add paint_view bitmap.
        * tkmap.c (handle_designer_mouse_down, paint_on_drag): Rewrite
        view painting.
----------------------------
revision 1.9
date: 1999/10/24 11:20:10;  author: ronne;  state: Exp;  lines: +229 -2
Add new indepside code, fix various bugs.
----------------------------
revision 1.8
date: 1999/10/02 00:49:34;  author: shebs;  state: Exp;  lines: +21 -36
	* ccmd.c, cconq.c, help.c, history.c, read.c, util.c, xinit.c:
 	Remove __STDC__ conditionals.
----------------------------
revision 1.7
date: 1999/08/21 12:16:39;  author: shebs;  state: Exp;  lines: +117 -126
        Eliminate still more warnings.
        * cmd.c, help.c, history.c, mknames.c, mkterr.c, mkunits.c,
        nlang.c, read.c, read2.c, score.c, side.c, supply.c, tp.c, ui.c,
        unit.c, unit.h, world.c, write.c: Remove PARAMS usages, remove
        unused variables, add missing function decls, comment out unused
        functions, etc.
        * obstack.h (obstack_begin): Add parameter types to fn pointer.
        * mknames.c (propose_unit_name): Fix "junky" naming method.
        * read.c (find_unit_spec_by_name, find_unit_spec_by_number):
        Use PARSE_PROPERTY_RETURN instead of PARSE_PROPERTY.
        * score.c (all_sides_draw): Assign result of add_side_to_set.
        * side.c: Include ai.h.
----------------------------
revision 1.6
date: 1999/07/28 12:31:05;  author: shebs;  state: Exp;  lines: +8 -4
        * read.c (CHECK_INDEX_1, CHECK_INDEX_2): Provide more info in
        error message.
----------------------------
revision 1.5
date: 1999/07/03 12:44:01;  author: ronne;  state: Exp;  lines: +0 -26
Clean up file, remove old change markers.
----------------------------
revision 1.4
date: 1999/06/01 19:39:57;  author: shebs;  state: Exp;  lines: +19 -42
Tue Jun  1 18:41:59 1999  Hans Ronne  <ronne@bmc.uu.se>
	* combat.c, conq.h, game.h, help.c, init.c, keyword.def,
 	mkunits.c, move.c, mplayer.c, plan.def, read.c, run.c, run2.c,
 	score.c, side.h, supply.c, table.def, ui.c, unit.c, unit.h,
 	utype.def, world.c, world.h, write.c, maccmd.c, maccolors.c,
 	macconq.h, macdefs.h, macdraw.c, macinit.c. maclist.c, macmap.c,
 	macmenus.c, macmouse.c, macprefs.c, macrow.c. macwins.c: Remove
 	old change markers.
	* actions.c (transfer_supply): Disable use of indepside treasury.
	(do_create_in_action): Make separate call to has_advance_to_build.
	(do_create_in_action): Use the builders stash of cps if allowed.
	(do_create_in_action): Fix null side treasury crashes.
	(check_create_common): Make separate call to has_advance_to_build.
	(check_create_common): Fix null side treasury crashes.
	(set_created_unit_props): Turn on automation for indeps & AI
 	controlled sides.
	(do_create_at_action): Make separate call to has_advance_to_build.
	(do_create_at_action): Use the builders stash of cps if allowed.
	(do_create_at_action): Fix null side treasury crashes.
	(make_unit_complete): Fix null actionvector crashes at turn zero.
	(do_transfer_part_action): Make separate call to
 	has_advance_to_build.
	(check_change_type_action): Add separate call to
 	has_advance_to_build.
	* ai.c (numaitypes): Move to config.h to make it globally
 	accessible.
	(set_side_ai): Turn on automation for indeps & AI controlled
 	sides.
	(ai_update_plan): New function.
	(goal_truth): Handle GOAL_UNIT_OCCUPIED and GOAL_COLONIZE.
	(ai_init_shared): Call set_u_is_ground_mobile etc.
	(ai_init_shared): Set u_colonizer.
	(ai_init_shared): Call set_u_offensive_worth etc.
	(ai_init_shared): Set u_naval_mobile, u_ground_mobile and
 	u_facility.
	(offensive_worth): New function.
	(defensive_worth): New function.
	(exploring_worth): New function.
	(colonizing_worth): New function.
	(facility_worth): New function.
	(siege_worth): New function.
	(random_worth): New function.
	(set_u_offensive_worth): New function.
	(set_u_defensive_worth): New function.
	(set_u_explorer_worth): New function.
	(set_u_colonizer_worth): New function.
	(set_u_facility_worth): New unction.
	(set_u_random_worth): New function.
	(set_u_siege_worth): New function.
	(set_u_is_ground_mobile): New function.
	(set_u_is_naval_mobile): New function.
	(set_u_is_air_mobile): New function.
	(set_u_is_advanced): New function.
	(set_u_is_colonizer): New function.
	(set_u_is_facility): New function.
	* ai.h (a_ai_op): Add (*to_update_plan).
	(ai_update_plan): Prototype new function.
	(offensive_worth, defensive_worth, etc): New prototype.
	* combat.c (do_overrun_action): Make ovverun after fire possible.
	(check_overrun_action): Make overrun after fire & into empty cell
 	possible.
	(do_fire_at_action): Use SideMask code to handle fire display.
	(do_fire_at_action): Permit attempt to capture after fire from
 	adjacent cell.
	(do_fire_into_action): Use SideMask code to handle fire display.
	(maybe_hit_unit): Support uu_cellwide_protection_against.
	(maybe_hit_unit): Support uu_cellwide_protection_for.
	(maybe_hit_unit): Use SideMask code to handle hit display.
	(maybe_hit_unit): Fix occupant recursion bug.
	(attempt_to_capture_unit): Support uu_cellwide_protection_against.
	(attempt_to_capture_unit): Support uu_cellwide_protection_for.
	(detonate_on_cell): Use for_all_stack_with_occs instead of
 	for_all_stack.
	(can_capture_directly): New function.
	(type_can_capture_directly): New function.
	(type_can_carry): New function.
	(occ_can_defend_transport): New function.
	* config.h (MAXATYPES): Increase to 254.
	(numaitypes): Move here from ai.c to make it globally accessible.
	* conq.h (advanced_utypes etc): Remove.
	(numadv etc): Remove.
	(can_extract_at): Prototype.
	(can_load_at): Prototype.
	(can_capture_directly): Prototype.
	(type_can_capture_directly): Prototype.
	(type_can_carry): Prototype.
	(occ_can_defend_transport): Prototype.
	(has_advance_to_build): Prototype.
	(unit_actually_visible): New prototype.
	* game.h (for_all_advanced_utypes, etc): Remove.
	* goal.def (GOAL_UNIT_OCCUPIED, GOAL_COLONIZE): New goals.
	* gvar.def (g_default_runlength): New name for
 	g_ai_build_runlength.
	(g_disable_standard_economy): New gvar.
	(g_disband_unfinished_units): New gvar.
	(g_salvage_unfinished_cps): New gvar.
	(g_salvage_unfinished_materials): New gvar.
	(g_ai_advanced_unit_separation): New gvar.
	(g_ai_badtask_remove_chance): New gvar.
	(g_ai_badtask_max_retries): New gvar.
	(g_ai_badtask_reserve_chance): New gvar.
	(g_units_may_go_into_reserve): New gvar.
	(g_units_may_go_to_sleep): New gvar.
	* help.c (may_detonate): Prototype.
	(describe_utype): Make display of Material Handling conditional.
	(describe_utype): Add "None" option to required advances code.
	(u_property_desc, etc): Add spaces after commas to permit new
 	lines.
	(append_help_phrase): Add more dashes and an extra linefeed.
	* imf.c (interp_image): Disable palette run warning on the Mac.
	* init.c (advanced_utypes etc): Remove.
	(final_init): Remove call to setup_utype_vectors.
	(setup_utype_vectors): Remove function.
	* kernel.h (go_after_captive): New prototype.
	(attack_can_damage_or_capture): New prototype.
	(fire_can_damage_or_capture): New prototype.
	(real_capture_chance): New prototype.
	* keyword.def (K_AUTOPLAN): New keyword.
	(K_CP_STASH): New keyword.
	* kpublic.h (net_resume_build_task): New extern prototype.
	* mac.c: Include MacTypes.h ifdef NEW_HEADERS, else include
 	Types.h.
	* mkunits.c (make_countries): Add separate call to
 	has_advance_to_build.
	(place_unit): Add separate call to has_advance_to_build.
	* move.c (do_move_action): Fix u2->nu2 typo & remove nu2
 	declaration.
	(do_enter_action): Fix u2->nu2 typo & remove nu2 declaration.
	* mplayer.c: Include kernel.h.
	(assign_to_defend_unit): Prototype new function.
	(assign_to_defend_cell): Prototype new function.
	(assign_to_defend_vicinity): Prototype new function.
	(mplayer_update_plan): Prototype new function.
	(defended_by_occupants): Prototype new function.
	(mplayer_ops): Add mplayer_update_plan.
	(update_unit_plans_randomly): Support g_units_may_go_into_reserve.
	(update_unit_plans_randomly): Support g_units_may_go_to_sleep.
	(mplayer_decide_plan): Skip for advanced units.
	(mplayer_decide_plan): Use u_colonizer_worth instead of
 	u_colonizer.
	(mplayer_update_plan): New function.
	(need_this_type_to_build_explorers): Check that we can build the
 	desired type.
	(assign_to_colonize): Rewrite. Use GOAL_COLONIZE and
 	PLAN_COLONIZING.
	(assign_to_improve): Clear task agenda and set NULL goal.
	(type_can_build_attackers): Check that we can build the desired
 	type.
	(type_can_build_colonizers): Add separate call to
 	has_advance_to_build.
	(type_can_build_colonizers): Use u_colonizer_worth instead of
 	u_colonizer.
	(preferred_build_type): Also count enemy occs by using
 	for_all_stack_with_occs.
	(preferred_build_type): Add separate call to has_advance_to_build.
	(preferred_build_type): Use u_colonizer_worth instead of
 	u_colonizer.
	(defended_by_occupants): New function.
	(assign_to_defense): Rewrite. Handle defense of units.
	(assign_to_defend_unit): New function.
	(assign_to_defend_cell): New function.
	(assign_to_defend_vicinity): New function.
	(assign_to_defend_theater): New function.
	(mplayer_adjust_plan): Skip for advanced units.
	(mplayer_adjust_plan): Add PLAN_COLONIZING & PLAN_IMPROVING.
	(mplayer_adjust_plan): Support g_units_may_go_into_reserve.
	(build_base_for_self): Check that we can build the desired type.
	(build_base_for_others): Check that we can build the desired type.
	(build_depot_for_self): Check that we can build the desired type.
	(rethink_plan): Support g_units_may_go_into_reserve.
	* plan.c: (execute_plan): Skip for advanced units.
	(execute_plan): Mark obsolete try code.
	(execute_plan): Support g_units_may_go_into_reserve.
	(execute_plan): Call ai_update_plan before execution.
	(plan_offense): Handle GOAL_UNIT_OCCUPIED and GOAL_CELL_OCCUPIED.
	(plan_offense): Support g_units_may_go_into_reserve.
	(plan_offense): Support g_units_may_go_to_sleep.
	(self_build_base_for_self): Check that we can build the desired
 	type.
	(plan_offense_support): Check that we can build the desired type.
	(plan_defense): Handle GOAL_UNIT_OCCUPIED and GOAL_CELL_OCCUPIED.
	(plan_defense): Call go_after_victim also for unit that can fire.
	(plan_defense): Use u_ai_tactical_range.
	(plan_defense): Support g_units_may_go_into_reserve.
	(plan_colonize): Rewrite. Use GOAL_COLONIZE.
	(plan_colonizer_support): Add separate call to
 	has_advance_to_build (2 times).
	(plan_colonizer_support): Use u_colonizer_worth instead of
 	u_colonizer.
 	(plan_improve): Add separate call to has_advance_to_build (2
 	times).
 	(good_cell_to_colonize): Rewrite. Check for presence of other
 	unit.  Check size goal for ALL advanced utypes. Remove check for
 	nearby enemy units.
	(plan_exploration): Support g_units_may_go_into_reserve.
	(plan_exploration): Handle GOAL_UNIT_OCCUPIED and
 	GOAL_CELL_OCCUPIED.
	(plan_exploration): Support g_units_may_go_to_sleep.
	(plan_explorer_support): Check that we can build the desired type.
	(victim_here): Also count with damage by fire and damage to occs.
	(victim_here): Give large size units higher rating.
	(victim_here): Give independent units lower rating.
	(victim_here): Give units that threaten our advanced units higher
 	rating.
	(go_after_captive): New function.
	(target_here): Also count with damage by fire and damage to occs.
	(target_here): Give large size units higher rating.
	(target_here): Give independent units lower rating.
	(target_here): Give units that threaten our advanced units higher
 	rating.
 	(capture_indep_if_nearby): Use u_ai_tactical_range.
 	(capture_useful_if_nearby): Use u_ai_tactical_range.
	* read.c (interp_unit): Restore code where ids start at 1 instead
 	of 0.
	(interp_unit): Add K_CP_STASH & K_AUTOPLAN.
	* run.c (unit_plan_dialog): New extern prototype.
	(net_resume_build_task): New extern prototype.
	(has_advance_to_research): New prototype.
	(select_by_weight): Prototype extern.
	(unit_build_dialog): Change prototype so that it returns int.
	(has_advance_to_build): Remove prototype.
	(create_selected_unit): Remove function and prototype.
	(auto_pick_new_plan): New function and prototype.
	(set_new_build_task): Remove function and prototype.
	(run_advanced_units): Enable run_construction for UNIX again.
	(run_population): Fix indepside crashes.
	(run_construction): Completely rewritten & extensively debugged.
	(auto_pick_new_research): Rewrite so that random task is picked.
	(auto_pick_new_build_task): Rewrite. Call auto_pick_new_plan.
	(auto_pick_new_plan): New function.
	* run2.c (vary_winds): Prototype.
	(update_area_display): Prototype extern.
	(run_turn_start): Check g_disable_standard_economy.
	* side.c (update_area_display): Prototype extern.
	(create_side): Fix toggle AI bug by initializing
 	newside->prefixarg.
	(side_controls_unit): Give debuggers full control.
	(side_sees_unit): Include trusted side, debuggers, g_peek_at_enemy
 	and endofgame.
	* side.h (has_advance): Fix null side crashes.
	* table.def (uu_builder_can_reuse_cp): New table.
	(uu_cellwide_protection_against): New table.
	(uu_cellwide_protection_for): New table.
	* task.c (attack_can_damage_or_capture): Move prototype to
 	kernel.h.
	(do_hit_unit_task): Count with fire and capture at pointblank
 	range.
	(do_hit_unit_task): Fix firing range bug.
	(do_hit_unit_task): Move in to capture if unit is undefended.
	(attack_can_damage_or_capture): Do attack if occ can be damaged.
	(fire_can_damage): Do attack if occ can be damaged.
	(fire_can_damage_or_capture):New function.
	(real_capture_chance): New function.
	(execute_task): Support g_ai_badtask_remove_chance.
	(execute_task): Support g_ai_badtask_max_retries.
	(execute_task): Support g_ai_badtask_reserve_chance.
	(execute_task): Support g_units_may_go_into_reserve.
	(set_build_task): Rewrite. Optionally disband any salvage
 	unfinished unit.
	(push_build_task): Rewrite. Optionally disband any salvage
 	unfinished unit.
	(set_occupy_task): New function.
	* tp.c (net_resume_build_task): New function (prototyped in
 	kpublic.h).
	* ui.c: Include MacTypes.h ifdef NEW_HEADERS, else include
 	Types.h.
	(xform_cell): Move core calculations to new function
 	xform_cell_flat.
	(xform_cell_flat): New function.
	(xform_cell_fractional_flat): New function.
	(favored_type): Check that we can build the desired type.
	* ui.h (xform_cell_flat, xform_cell_fractional_flat): New
 	prototypes.
	* unit.c (default_size): Change from 0 to 1.
	(has_advance_to_build): Remove prototype.
	(create_unit): Initialize unit->autoplan.
	(create_unit): Initialize unit->cp_stash.
	(can_carry): Check for u_facility_total_max & u_mobile_total_max.
	(type_can_occupy): Check for u_facility_total_max &
 	u_mobile_total_max.
	(type_allowed_on_side): Remove call to has_advance_to_build.
	(set_unit_side): Turn on autobuild & autoresearch if side is under
 	AI control.
	* unit.h (a_unit): Add unit->cp_stash.
	(a_unit): Add unit->autoplan.
	(for_all_occs_with_occs): Define new macro.
	(type_ever_available): Prototype extern.
	* utype.def (u_offensive_worth): New utype property.
	(u_defensive_worth): New utype property.
	(u_explorer_worth): New utype property.
	(u_colonizer_worth): New utype property.
	(u_facility_worth): New utype property.
	(u_random_worth): New utype property.
	(u_siege_worth): New utype property.
	(u_offensive): Change default from 1 to 0.
	(u_explorer): Change default from 1 to 0.
	(u_besieger): New utype property.
	(u_ship): New utype property.
	(u_ground): New utype property.
	(u_air): New utype property.
	(u_facility_total_max): New utype property.
	(u_mobile_total_max): New utype property.
	(u_ai_min_defenders) : Ner utype property.
	(u_ai_tactival_range): New utype property.
	* world.c (latlong_to_xy): Fix meridian drawing bug.
	* world.h (cell_is_within_n_steps): Rename to
 	cell_is_within_range.
	(for_all_cells_within_n_steps): Rename to
 	for_all_cells_within_range.
	(for_all_stack_with_occs): Define new macro.
	* write.c (write_area_users): Change so that nextid starts at 1
 	instead of 0.
	(write_units): Restore old code so that nextid starts at 1 instead
 	of 0.
	(write_unit_properties): Add K_AUTOPLAN & K_CP_STASH.
	* macadv.c: (MAX_DISPLAYED_FACS): New macro constant.
	(MAX_DISPLAYED_OCCS): New macro constant.
	(CLEAR_AGENDA): New macro constant.
	(unit_build_dialog): Change prototype.
	(has_advance_to_build): Remove prototype.
	(create_selected_unit): Remove prototype.
	(copy_rect_from_gworld): New function and prototype.
	(city_dialog): Rewrite. Many bug fixes and improvements.
	Most important ones:  Add conditional call to draw_unit_info.
	Use backcolor to draw region outside the area in the city map.
	Use copy_rect_from_gworld to do the offscreen graphics.
	Disable all auto checkboxes when dside is under AI control.
	Check that unit has a plan. Add new Plan Type popup menu.
	Add new Autoplan checkbox. Add new AI control checkbox.
	Split occupant panel into facilities and garrison panels.
	Fix runlength bug and limit it to CLEAR_AGENDA.
	Call net_clear_task_agenda & net_set_unit_asleep for idle units.
	Add separate call to has_advance_to_build.
	(draw_city_statistics): Rewrite. Many bug fixes and improvements.
	Most important ones: Add drawing of unit icon.
	Fix sporadic name bug by call to side_adjective.
	Fix parenthesis bug in construction status field.
	Fix crashing bug in occupant display code.
	Use u_facility_worth instead of !mobile to identify facilities.
	Add AI control info text field.	 Add new facilities and garrison
	panels.
	Fix bugs in construction status.
	Use white background color with unit icons.
	Add cps to occupant names when debugging.
	(draw_landuse_near_unit): Rename macro to for_all_cells_within_range.
	(unit_build_dialog): Rewrite. Many bug fixes. return int instead
	of *unit.
	Add separate call to has_advance_to_build.
	(unit_plan_dialog): New function and prototype.
	(global_advance_dialog): Fix autoresearch bug.
	Fix crashes due to incorrect oldprojects[] array size.
	Move SetPort call to position after conditional return.
	Fix sporadic name bug by two calls to side_adjective.
	* maccmd.c (do_set_view_angle): Only set vertscale if given a
 	valid prefixarg.
	* maccolors.c (default_draw_ai): Initialize to TRUE.
	(alert_256_colors): Initialize to TRUE.
	* macconq.c (main): Move check_screen_depths after get files and
 	make conditional.
	(update_area_display): Prototype extern. Add Side parameter.
	* macconq.h: Include MacWindows.h ifdef NEW_HEADERS, else include
 	Windows.h.
	(a_map): Add map->draw_ai.
	(default_draw_ai): New extern.
	(alert_256_colors): New extern.
	(xform_fractional): Move prototype here.
	(xform_flat): New prototype.
	(xform_fractional_flat): New prototype.
	* macdefs.h: (mPlanTypePopup): New menu.
	(miPlanTypeColonizing): New menu item.
	(miPlanTypeImproving): New menu item.
	(miPlanTypeRandom): New menu item.
	(diPrefsAIRegions): New dialog item.
	(diPrefs256colors): New dialog item.
	(dCity): All dialog items renumbered and renamed.
	(dPlan): New dialog with 3 dialog items.
	* macdraw.c (draw_unit_image): Rewrite. Support sidecolors in
 	closeups etc.
	(draw_unit_image): Restore colors BEFORE calling gray_out_rect (2
 	times).
	(draw_unit_image): Fix emblem bug due to new emblem_position code.
	* maclist.c (create_list): Use GetNewCWindow if hasColorQD.
	(draw_unit_list_entry): Fix task_desc prototype error.
	* macmap.c (xform_fractional): Move prototype to macconq.h.
	(xform_flat): New function.
	(xform_fractional_flat): New function.
	(adjust_latlong_interval): New function and prototype.
	(create_map): Use default_draw_ai.
	(create_map): Call adjust_latlong_interval.
	(set_map_power): Call adjust_latlong_interval.
	(set_map_angle): Compute a suitable vertscale.
	(draw_meridians): Fix sporadic longitude top error.
	(draw_meridians): Call xform_fractional_flat instead of
 	xform_fractional.
	(draw_selections_at): Fix (x,y) bug.
	(draw_selected_unit): Draw enemy units in red.
	(draw_selection_animation): Draw enemy units in red.
	(update_cell): Make DestRect larger to include row below.
	(update_cell): Use UNWRAP_RECT for meridians & feature names.
	* macmenus.c: (all_ai_ops): Prototype extern for use in
 	build_ai_type_menu.
	(query_position_modally): Unselect all selected units outside our
 	control.
	(do_closeup_mi): Prototype extern for use in ctrl-clicking of
 	unit.
	(build_ai_type_menu): Load AIs dynamically to the menu.
	(do_menu_command): Add support for dynamically loaded AIs.
	(do_menu_command): Support PLAN_COLONIZING & PLAN_IMPROVING.
	(apply_to_all_selected): Don't apply to selected units that we
 	don't control.
	(do_closeup_mi): Remove static declaration.
	(adjust_menus): Add support for dynamically loaded AIs.
	(adjust_menus): Don't enable commands for enemy unit closeups.
	(enable_commands_for_unit): Support PLAN_COLONIZING &
 	PLAN_IMPROVING.
	(enable_commands_for_unit): Fix menu number bug that disables More
 	menu items.
	* macmouse.c (do_closeup_mi): Prototype extern for use in
 	ctrl-clicking of unit.
	(do_mouse_down_map_content): Disable move and fire cmds for
 	selected enemy units.
	(do_mouse_down_map_content): Rewrite ctrl-clicking code using
 	side_sees_unit.  Call do_closeup_mi if ctrl-clicking non-advanced
 	unit, else call city_dialog.
	(select_all_units_in_rect): Always permit this if side_sees_unit.
	* macprefs.c (interp_mac_ui_data): Support default_draw_ai &
 	alert_256_colors.
	(ui_update_state): Support default_draw_ai & alert_256_colors.
	(set_preferences): Add case diPrefsAIRegions & diPrefs256colors.
	(set_preferences): Support default_draw_ai & alert_256_colors.
	(add_preferences_topic_items): Support default_draw_ai &
 	alert_256_colors.
	* macrow.c (draw_cliffs): Fix ouside-area crashes.
	(draw_contours): Trigger unwrapping 1 hex from right edge.
	(draw_gridlines): Trigger unwrapping 1 hex from right edge.
	(draw_shorelines): Trigger unwrapping 1 hex from right edge.
	(draw_feature_boundary_simple): Trigger unwrapping 1 hex from
 	right edge.
	* macwins.c (closeupwinwid): Change to 340.
	(init_construction_lists): Add separate call to
 	has_advance_to_build.
	(adjust_construction_controls): Check that we can build the
 	desired type.
	(side_rename_dialog): Fix colorscheme bug.
	(preferred_closeup_size): Add 4 pixels at bottom.
	(draw_unit_closeup): Make sure this is the selected unit on all
 	maps.
	(draw_unit_closeup): Optionally permit peeking at enemy units.
	(draw_unit_closeup): Fix duplicate goal_desc problem.
	(draw_unit_closeup): Align goal_desc and remove flanking junk.
	(draw_unit_closeup): Align task_desc and write "Task".
	(do_mouse_down_unit_closeup): Make sure this is the selected unit
 	on all maps.
	(destroy_unit_closeup): Make sure this is the selected unit on all
 	maps.
	* XconqProj.rsrc: (DITL 803 "City"): Extensively modified.
	(DITL 702 "Preferences Map Items"): Add AI regions checkbox.
	(DITL 704 "Preferences Offscreen Items"): Add recommend 256 colors
 	checkbox.
	(DITL 804 "City Research"): Minor changes.
	(DITL 805 "Global Science"): Minor changes.
	(DITL 807 "City Build"): Minor changes.
	(DITL 808 "City Plan"): New dialog item list.
	(DLOG 808 "City Plan"): New dialog.
	(MENU 206 "AI Types"): Remove static AI items.
	(MENU 249 "Plan Types"): Restore damaged resource. Add 3 new
 	items.
	* Xconq.r: Update from XconqProj.rsrc.
	* xconq.c (unit_build_dialog): Rewrite. Fix argument error.
	(unit_plan_dialog): New function.
----------------------------
revision 1.3
date: 1999/05/31 08:35:14;  author: shebs;  state: Exp;  lines: +13 -8
	* read.c (interp_variant_defns): Complain about bad variants
	instead of trying to compensate.
	* bitmaps/return.b: New bitmap.
	* tkconq.tcl: Set item widths for imf samples.
	(select_player): Handle unused slots better.
	(create_map_window): Add return button.
	(update_action_controls_info): Handle return button.
	* tkcmd.c (do_embark): Improve error mesage.
	(do_fire): Complain if no keystroke.
	* tkinit.c: Init return bitmap.
	* tkmain.c (tk_interp_key): Clear inpch.
	* test/warn.g: Add invalid variants to test new warnings.
	* ancient.g (real-time-per-turn): Set.
	* panzer.g (ferry-on-entry): Let all types of vehicles handle
	artillery.
	* PROJECTS: Reflect above changes, add still more ideas.
----------------------------
revision 1.2
date: 1999/05/04 05:08:56;  author: shebs;  state: Exp;  lines: +1 -4
        * atype.def, mtype.def, ttype.def (available): Remove.
        * utype.def (available): Allow negative values, as doc'ed.
        * keyword.def (battle, silhouette): Remove.
        * actions.c (distribute_material): Check for unit trust.
        * imf.h (Image style): Remove.
        (ImageFamily preferred_style): Remove.
        * imf.c: Remove style references everywhere.
        (interp_image): No longer recognize silhouette keyword.
        * ui.c: Ditto.
        * init.c (check_game_validity): Remove availability checks,
        add test of u_wrecked_type value.
        * nlang.c (task_desc): Describe pickup task.
        * read.c: Remove recognition of K_BATTLE.
        * run2.c (run_economy): Rewrite to scan needy units in second
        pass.
        (need_left, try_sharing_need): New functions.
        * world.c (search_and_apply): Terminate early if pred fails.
----------------------------
revision 1.1
date: 1999/04/28 19:36:30;  author: shebs;  state: Exp;
Initial checkin.
=============================================================================
