
RCS file: /cvs/xconq/xconq/kernel/side.h,v
Working file: side.h
head: 1.49
branch:
locks: strict
access list:
symbolic names:
	xconq-7_4_1-release: 1.27
	xconq-7_4-branch: 1.27.0.2
	xconq-7_4-branchpoint: 1.27
	xtconq-pre-removal: 1.22
	xconq-7_3_3-release: 1.14
	xconq-7_3_2-release: 1.14
	xconq-7_3_1-release: 1.14
	xconq-7_3-branch: 1.14.0.2
	xconq-7_3-branchpoint: 1.14
keyword substitution: kv
total revisions: 49;	selected revisions: 49
description:
----------------------------
revision 1.49
date: 2004/07/08 07:25:59;  author: ronne;  state: Exp;  lines: +8 -0
Further improvements to the unit view code.
----------------------------
revision 1.48
date: 2004/07/03 00:33:24;  author: ronne;  state: Exp;  lines: +31 -12
Fix unit view macro bug.
----------------------------
revision 1.47
date: 2004/07/01 23:18:56;  author: ronne;  state: Exp;  lines: +34 -19
More fixes to the unit view code.
----------------------------
revision 1.46
date: 2004/06/26 15:45:37;  author: ronne;  state: Exp;  lines: +13 -9
Various bug fixes and improvements to the kernel.
----------------------------
revision 1.45
date: 2004/04/25 00:32:41;  author: ronne;  state: Exp;  lines: +1 -1
Add protection against out-of-bounds access of area layers.
----------------------------
revision 1.44
date: 2004/03/24 19:08:53;  author: ronne;  state: Exp;  lines: +31 -0
Improve common move-to and build command code.
----------------------------
revision 1.43
date: 2004/01/05 23:36:37;  author: ronne;  state: Exp;  lines: +13 -0
Add pre-flight checks of move commands to the ui code.
----------------------------
revision 1.42
date: 2003/10/18 16:59:40;  author: ronne;  state: Exp;  lines: +8 -1
Overhaul of material handling code.
----------------------------
revision 1.41
date: 2003/08/06 00:18:20;  author: ronne;  state: Exp;  lines: +1 -0
Improve repair, resupply, AI and namer code.
----------------------------
revision 1.40
date: 2003/07/07 02:31:44;  author: mcdonald;  state: Exp;  lines: +1 -0
Fix segfault due to writing past end of buffer. Fix comment.
----------------------------
revision 1.39
date: 2003/05/01 19:20:27;  author: ronne;  state: Exp;  lines: +10 -0
Rewrite and improve unit view code.
----------------------------
revision 1.38
date: 2003/04/26 16:03:17;  author: ronne;  state: Exp;  lines: +0 -27
Improve struct UnitView and clean out obsolete macros.
----------------------------
revision 1.37
date: 2003/04/17 18:08:41;  author: ronne;  state: Exp;  lines: +3 -3
Enable drawing of occs in the sdl interface.
----------------------------
revision 1.36
date: 2003/02/25 23:25:14;  author: ronne;  state: Exp;  lines: +6 -2
Comment out agreement code. Fix some bugs.
----------------------------
revision 1.35
date: 2003/01/18 16:41:15;  author: ronne;  state: Exp;  lines: +162 -136
Update Doxygen comments.
----------------------------
revision 1.34
date: 2002/12/30 20:58:20;  author: ronne;  state: Exp;  lines: +4 -4
Expurgate wrapx from the interfaces.
----------------------------
revision 1.33
date: 2002/12/27 21:19:47;  author: ronne;  state: Exp;  lines: +1 -0
Fix sunrise view update bug.
----------------------------
revision 1.32
date: 2002/08/31 21:59:41;  author: ronne;  state: Exp;  lines: +1 -0
More tcltk interface improvements.
----------------------------
revision 1.31
date: 2002/07/31 20:40:08;  author: ronne;  state: Exp;  lines: +864 -206
Add Doxygen comments to kernel includes.
----------------------------
revision 1.30
date: 2002/05/08 23:51:17;  author: ronne;  state: Exp;  lines: +1 -1
Make sources C++ compatible.
----------------------------
revision 1.29
date: 2000/12/28 16:04:08;  author: shebs;  state: Exp;  lines: +14 -2
	Streamline handling of can-build testing, add cases for
	can-develop.
	* side.h (Side candevelop): New field.
	(side_can_develop): New macro.
	* side.c (create_side): Allocate candevelop.
	* run.c (update_canbuild_vector): Fill in candevelop vector too.
	* unit.c (unit_can_build_type): New function.
	* plan.c (plan_offense_support, plan_colonize_support,
	plan_explorer_support): Use it.
	* macunit.c (build_construction_menu): Ditto.
	* tkcmd.c (do_build): Ditto.
	* ccmd.c (do_build): Ditto.

	* tkcmd.c (do_fire, aux_fire_at): Rewrite to use same code for
	keyboard and menu select cases.
	(common_fire_at): New function.
	(do_fire_into, aux_fire_into, common_fire_into): Similarly.

	* macwins.c (adjust_construction_controls): Use could_create
	and could_develop.
----------------------------
revision 1.28
date: 2000/12/21 14:41:34;  author: shebs;  state: Exp;  lines: +1 -1
	Fix problems resulting from the last change.
	* game.h (DONE, NOADVANCE): Assign values different from NONATYPE.
	(NOUNIT): Remove, never used.
	* side.h (has_advance): Use DONE.
	* world.h (NOUSER): Move to here, set to 0.
	* world.c (allocate_area_users): Remove memset of layer.
	* generic.c (init_types): Remove unused debug print.
	(create_unit_type): Make array resizing work.
	(create_material_type, create_terrain_type, create_advance_type):
	New functions.
	* read.c (interp_mtype, interp_ttype, interp_atype): Use them.
	* run.c (apnbt_types): New static global.
	(auto_pick_new_build_task): Use it instead of tmp_u_array.

	* PROJECTS: Remove MAXUTYPES project.
----------------------------
revision 1.27
date: 2000/11/12 00:39:54;  author: ronne;  state: Exp;  lines: +2 -0
General cleanup of kernel prototypes - part 1.
----------------------------
revision 1.26
date: 2000/10/06 15:53:49;  author: shebs;  state: Exp;  lines: +0 -1
	* side.h (Side numadvances): Remove field, never used.
	* side.c (create_side): Don't set.
	* read.c (fill_in_side): Don't interpret numadv.
	(interp_unit_plan): Make creation turn optional as documented.
	(interp_task): Be more flexible about syntax.
	* write.c (write_side_properties): Don't write side->numadvances.
	* table.def (hp-on-completion): Remove, never used.

	* mkunits.c (make_independent_units): Add a comment.
----------------------------
revision 1.25
date: 2000/09/25 15:39:40;  author: shebs;  state: Exp;  lines: +2 -0
	* init.c (final_init): Display size of history objects.
	(calculate_globals): Make first call to
	update_canbuild_vector here...
	* side.c (create_side): ... instead of here.

	* side.c, side.h (actual_advantage): New function.
	* mkunits.c (make_countries): Use it, also remove incorrect call
	to side_can_build (breaks no-building games).
	(place_units): Simplify, remove side_can_build test.
	* score.c (record_into_scorefile): Use actual_advantage.
----------------------------
revision 1.24
date: 2000/09/10 05:45:40;  author: shebs;  state: Exp;  lines: +7 -2
	Random rewrites and reorgs resolving remote networking bugs.
	* ai.c (init_ai): Fill in side->rai for remote AIs.
	(set_side_ai): Simplify, and add feedback on results.
	(run_local_ais, run_ai_plan_adjust): Move here from run.c,
	test taskexecs instead of need_ai_task_reaction.
	* cmd.c (do_ai_side): Fix player feedback to reflect that
	network roundup may be necessary before state changes.
	* cmdline.c (option_width, option_height, option_circumference):
	New globals.
	(parse_world_option): Set these instead of pushing a variant.
	(set_variants_from_options): Call net_set_variant_value instead
	of pushing variant settings.
	(find_variant_from_name): New function.
	* init.c (start_player_pre_setup_stage): Call do_module_variants.
	(final_init): Report more data structure sizes.
	* kernel.h (set_variant_value): Declare.
	* kpublic.h (net_set_variant_value): Declare.
	* module.h (Variant newvalues): New field, array of new settings
	for variant.
	* module.c (create_game_module): Store a copy of the module name.
	(set_variant_value): Move here from tkmain.c.
	(do_one_variant): Fill from newvalues fields.
	* read.c (interp_variant_defns, add_std_var): Fill in newvalues
	fields.
	* run.c (latest_action_x, latest_action_y): New globals.
	(num_local_ais): Move to ai.c.
	(need_ai_task_reaction): Remove, use taskexecs instead.
	(save_run_state, clear_task_outcomes): New functions.
	(run_game): Call them.
	(move_one_unit_multiple): Replace need_ai_task_reaction test
	with last_task_outcome and AI usage test.
	(run_side_research, run_construction): Test local AI instead
	of AI in general (dubious).
	* side.h (Side rai): New field.
	(side_has_ai): Test both local and remote AI.
	(side_has_local_ai): New macro.
	* task.c (execute_task): Rework recording of task outcome.
	* tp.h (RAI): New struct, placeholder "remote AI".
	* tp.c: Change run warnings into notices.
	(net_set_variant_value): New function.
	(receive_variant_settings): Allow at most three values.
	* write.c (write_side_properties): Only write AI state for
	local AIs (dubious).

	* tkconq.tcl: Rewrite variant handling to do more work in
	kernel.
	(set_variant_value_cmd): New proc, replaces broadcast_variant_value.
	(set_variants): Do less.
	(add_world_size_dialog_items): Comment out lat/lon items.
	(insert_chat_string): Test for existence of window before insert.
	* tkmain.c: Rewrite for variants also.
	(send_value_value, implement_variants): Remove tcl commands.
	(tk_set_variant_value): Rewrite to pass along to kernel.
	(interpret_variants): Rewrite.
	(set_variant_world_size, set_variant_real_time): Remove,
	handled uniformly in kernel.
	(update_variant_setting): Rewrite.
----------------------------
revision 1.23
date: 2000/08/25 22:19:11;  author: ronne;  state: Exp;  lines: +3 -0
Fix indepside-related research hangs.
----------------------------
revision 1.22
date: 2000/08/21 21:34:35;  author: ronne;  state: Exp;  lines: +3 -10
Consolidate for_all_sides macros.
----------------------------
revision 1.21
date: 2000/08/20 20:25:05;  author: ronne;  state: Exp;  lines: +5 -2
More changes to construction and research.
----------------------------
revision 1.20
date: 2000/08/13 15:21:00;  author: shebs;  state: Exp;  lines: +13 -5
	Fix various bugs in unit viewing, especially for see_all case.
	* iplayer.c (can_see_actual_units): Remove, no longer used.
	(preferred_build_type): Test side->see_all.
	* mplayer.c (can_see_actual_units): Remove, no longer used.
	(review_theaters, estimate_strengths, preferred_build_type): Fix
	!side->see_all cases.
	* plan.c (victim_here): Remove a comment.
	* side.c (become_designer, become_nondesigner): Add notices
	to all sides.
	(unit_view_at, unit_view_next): Handle side->see_all case by
	faking view objects.
	(add_unit_view): Record the date of the unit view.
	* side.h: Add some comments.
	* task.c (do_hit_unit_task): Always use unit views.
	(parse_unit): Remove redundant see_all test.
----------------------------
revision 1.19
date: 2000/08/11 03:21:31;  author: shebs;  state: Exp;  lines: +16 -5
	* unit.h (UnitView size, date): New fields.
	* side.h (view_size): New macro.
	* plan.c (victim_here, target_here): Use view size.
	* side.c (side_sees_unit, side_sees_image): Return true if
	side->show_all.
	(add_unit_view): Fill in view of unit size.
----------------------------
revision 1.18
date: 2000/08/08 17:11:52;  author: shebs;  state: Exp;  lines: +3 -1
	* nlang.c (tooling_desc): New function.
	(notify_doctrine): List contents of all doctrines.
	(notify_doctrine_1): List construction run lengths.
	* plan.c (est_completion_time): Move to here from nlang.c.
	* read.c (read_default_doctrine): Rename from read_general_doctrine,
	don't try to handle property values here.
	(read_utype_doctrine): Similarly.
	(utype_from_name): Handle empty strings.
	* read2.c (interp_utype_list): Move to here from unit.c.
	* side.h (Side numlive): Remove field, never used.
	(for_all_doctrines): New macro.
	* side.c (init_sides): Set next_doctrine_id to 1, so save/restore
	doesn't get confused.
	(create_side): Don't alloc space for numlive.
	(become_designer): Don't enable may_set_show_all if see_all.
	(cover_area): Test side->see_all instead of g_see_all.
	(new_doctrine): Ensure new doctrine has unique id.
	(clone_doctrine): Comment out, never used.
	* unit.c (set_unit_side): Remove adjust of numlive.
	(find_unit_name): Remove, unused and useless.
	(num_occupants, num_units_at, get_x_property_by_name): Comment
	out, never used.
	* write.c: Cosmetic improvements.
	* conq.h, unit.h: Update to reflect movements.
----------------------------
revision 1.17
date: 2000/08/01 16:17:13;  author: shebs;  state: Exp;  lines: +1 -1
	Use a hash table for unit views.
	* side.h (Side unit_views): Declare as pointer to pointer.
	* side.c (VIEW_HASH_SIZE): New macro.
	(init_view): Allocate hash table.
	(unit_view_at, add_unit_view, remove_unit_view): Use hash table.
	(add_unit_view_raw): New function.
	* read.c (interp_unit_views): Call it.
	* write.c (write_side_view): Iterate over area to find unit views.
----------------------------
revision 1.16
date: 2000/07/30 13:06:43;  author: ronne;  state: Exp;  lines: +4 -1
Cache research and build vectors, make ai resignation optional.
----------------------------
revision 1.15
date: 2000/07/03 16:43:38;  author: shebs;  state: Exp;  lines: +18 -39
	Change unit viewing to use view objects instead of a layer.
	* unit.h (UnitView): New struct.
	* side.h (Side unitview, unitviewdate): Remove.
	(Side unit_views): New field.
	(for_all_view_stack): New macro.
	(unit_view, set_unit_view, builduview, vside, vtype, vhp, EMPTY,
	appears_empty, vside_indep, unit_view_date, set_unit_view_date):
	Remove, no longer used.
	* config.h (MAXVIEWHISTORY): Remove, no longer used.
	* side.c (init_view): Remove unit view layer init.
	(unit_view_at, unit_view_next, add_unit_view, remove_unit_view,
	mistake_view): New functions.
	(fn_set_unit_view, fn_set_unit_view_date): Remove.
	(side_sees_image, all_see_leave, reset_all_views,
	react_to_seen_unit, see_cell, see_exact, paint_view_1): Rewrite to
	use view objects.
	* ai.c (enemies_present): Ditto.
	* iplayer.c (preferred_build_type): Ditto.
	* mkroads.c (unit_sees_other_unit): Ditto.
	* mplayer.c (review_theaters, estimate_strengths,
	preferred_build_type): Ditto.
	* plan.c (alternate_target_here, victim_here, target_here,
	indep_captureable_here, useful_captureable_here,
	can_capture_neighbor): Ditto.
	* ps.c (sideno_of_seen_unit_at): Ditto.
	* run2.c (unit_revolt, visible_to): Ditto.
	* task.c (target_visible): Ditto.
	* ui.c (oneliner, dump_text_view
	* cdraw.c (draw_units, draw_legend, show_closeup): Ditto.
	* xdraw.c (draw_map_info, etc): Ditto.
	* macdesign.c (apply_designer_tool): Ditto.
	* macrow.c (draw_units): Ditto.
	* tkmain.c (update_mouseover): Ditto.
	* tkmap.c (draw_units, handle_designer_mouse_down): Ditto.
	(x_xform_unit_view): New function.

	* init.c (init_all_views): Fold in init_view_2, comment out
	unit view clearing.
	* plan.c (threat, usable_cell): Comment out, not used apparently.
	* read.c (fill_in_side): Comment out unit view reading.
	* ui.c, ui.h (xform_unit_view_: New function.
	(utype_seen_at): Comment out unit view case.
	* write.c (fn_unit_view, fn_unit_view_date): Remove.
	(write_side_view): Write unit view list instead of layer.

	* cmdline.h (make_default_player_spec): Move decl to here
	from cmdline.c.
	* skelconq.c, wconq.c, xconq.c, xtconq.c, xtmain.c: Remove decls
	that are in cmdline.h.
	* tkmain.c: Ditto, and include cmdline.h.
	* cconq.c (make_default_player_spec): New function.

	* tkmain.c (tk_reset_popup_flag): New tcl command.

	* nlang.c (medium_long_unit_handle): Remove unused local.
----------------------------
revision 1.14
date: 2000/04/08 14:58:22;  author: ronne;  state: Exp;  lines: +1 -0
Add side->autoresearch option.
----------------------------
revision 1.13
date: 1999/12/14 03:13:02;  author: shebs;  state: Exp;  lines: +7 -7
	* side.h (Side c_rates): New field.
	* cmd.def (c-rate): New command, sets material conversion rates.
	* cmd.c (do_c_rate): New function.
	* run.c (run_advanced_units): Rewrite conversion to use user
	specified rates.
----------------------------
revision 1.12
date: 1999/12/01 04:14:44;  author: shebs;  state: Exp;  lines: +2 -1
	* nlang.c (size_desc): New function.
	* run.c (run_construction): Handle missing unit plan.
	(allocate_used_cells): Use main city cell for free, test for
	independence correctly.
	* run2.c (run_side_research): New function.
	(run_turn_start): Call it.
	* side.h (Side research_topic): New field.
	* side.c (create_side): Set it.
	(set_side_research): New function.
	* ui.c (oneliner): Describe usage of cell.
	* unit.c (has_advance_to_build): Remove type if obsolete.
----------------------------
revision 1.11
date: 1999/10/30 14:37:26;  author: shebs;  state: Exp;  lines: +19 -16
       * score.c: Make various statics and externs, iterate all
        scorekeepers over real sides only, don't involve indepside.
        * side.h (for_all_real_sides): Put sidelist test into for loop.
----------------------------
revision 1.10
date: 1999/10/26 15:32:09;  author: shebs;  state: Exp;  lines: +5 -7
        Reorganize see-all handling, add separate concept of show-all
        that only affects display.
        * side.h (Side show_all): New field.
        (Side may_set_show_all): Rename from may_set_see_all.
        * ui.h (VP show_all): Rename from see_all.
        * init.c (init_all_views): Use new field, don't set all_see_all.
        * actions.c, ai.c. combat.c, mplayer.c, nlang.c, plan.c, ps.c,
        read.c, run.c, run2.c, score.c, side.c, side.h, ui.c, unit.c,
        write.c: Use g_see_all() or side->see_all instead of all_see_all,
        side->may_set_show_all instead of side->may_set_see_all.
        * macconq.c, macdesign.c, macmap.c, macmouse.c, macrow.c: Ditto.
        * tkcmd.c, tkmain.c, tkmap.c: Ditto.
        * xcmd.c, xmap.c, xtmain.c: Ditto.
        * run.c (end_the_game): Set side->show_all.
        * side.c (become_designer, become_nondesigner): Ditto.

        * tkcmd.c (aux_design, really_do_design): Call set_show_all and
        update_show_all_info.
        * tkconq.tcl (may_set_show_all): Rename from may_set_see_all.
        (default_map_options): New global array, use everywhere instead
        of map_options.
        (map_options): Index by map widget also.
        (update_view_controls_info): Don't set may_set_show_all.
        (update_show_all_info, update_show_all): New procs.
        * tkinit.c (init_display): Update show_all info.
        * tkmain.c (update_turn_display): Set show_all.
        * tkmap.c (m_terrain_visible, m_units_visible): New macros, use
        everywhere.
        (set_show_all): New function.

        * combat.c (do_overrun_action): Fix call to do_fire_at_action
        to not shoot at self(!).

        * side.c (paint_view_1): Add special case to do exact view.

        * unix.c (score_file_pathname): Look for env var XCONQ_SCORES
        instead of XCONQSCORES.

        * tkconq.h (UI told_outcome): Remove, never used.
        * tkmain.c (told_outcome): Make static local.
        * tkconq.tcl (disable_move_mode): New proc.
        (popup_game_over_dialog): Use it.
        (popup_design_palette): Add view painting button.
        (make_view_paint_frame): New proc.
        (make_terrain_paint_frame): Increase size of terrain samples.
        (make_people_paint_frame, make_control_paint_frame): Turn on
        people/control display in all maps.
        * tkinit.c (init_bitmaps): Add paint_view bitmap.
        * tkmap.c (handle_designer_mouse_down, paint_on_drag): Rewrite
        view painting.
----------------------------
revision 1.9
date: 1999/10/25 21:10:41;  author: ronne;  state: Exp;  lines: +1 -1
Clean out NULL side stuff, fix some bugs.
----------------------------
revision 1.8
date: 1999/10/24 11:20:10;  author: ronne;  state: Exp;  lines: +17 -3
Add new indepside code, fix various bugs.
----------------------------
revision 1.7
date: 1999/09/24 23:52:47;  author: shebs;  state: Exp;  lines: +6 -7
	* side.h (Side rid): Remove slot, not needed.
	* ai.c: Add some comments.
	(init_ai): Handle networked case correctly.
	* init.c (set_player_advantage, rename_side_for_player,
	set_ai_for_player): New functions.
	(assign_players_to_sides): Remove setting of side->rid, test
	player->rid instead, improve warning message.
	* socket.c: Add some comments.
	(open_remote_connection): Remove dead code in hosting case,
	retry 5 instead of 15 times in joining case.
	(close_remote_connection): Handle arg of 0 usefully.
	* tp.c (init_remote_ui): Set rui->rid from player->rid.
	(net_set_player_advantage): Call set_player_advantage.
	(net_add_side_and_player, net_rename_side_for_player,
 	net_set_ai_for_player): New function.
	(receive_assignment_setting): Add rest of messages, share
	assignment callback use.

	* tkconq.tcl (update_allplayer_buttons): New proc, code to
	adjust buttons that affect all players.
	(add_player_dialog_items, add_player_cmd, select_player): Use it.
	(exchange_players_cmd): Only update if valid return from exchange.
	(join_game): Inform player about result of join attempt.
	* tkmain.c (tk_add_side_and_player, tk_rename_side_for_player,
	tk_set_ai_for_player): Use net_ functions.
	(tk_try_join_game): Return result of try_join_game.
	(try_join_game): Move here from xconq.c & wconq.c, also return
	success or failure.
	(update_assignment): Call update_allplayer_buttons.

	* wconq.c, xconq.c (try_join_game): Remove.
	* xconq.c (host_the_game): Warn about connection failure.
----------------------------
revision 1.6
date: 1999/09/21 02:25:16;  author: shebs;  state: Exp;  lines: +2 -0
	General cleanup of networking support.
	* side.h (side_has_local_display): Move to here from various
	files.
	* tp.h (add_remote_program, etc): Move decls here from tp.c.
	* tp.c (hosting): Define here.
	(download_game_module): Copy over more module properties.
	(receive_packet): Remove L packet.
	(receive_player_prop): Remove "Pyou" packet.
	* mac.c (hosting, connection_method_name): Remove, comment out
	code that uses.
	(open_remote_connection): Add hosting arg, return result.
	(close_remote_connection): Add argument.
	* socket.c: Similarly.
	* macconq.c, macconq.h, macinit.c, tkmain.c, wconq.c, xconq.c,
 	xtconq.c, xtmain.c, cconq.c: Update references.
	* system.h (open_remote_connection): Update decl.
	* skelconq.c, macinit.c, wconq.c, xconq.c, xtconq.c, cconq.c
 	(you_player, set_you_player, add_remote_player, launch_game):
 	Remove, no longer used.
	* wimfapp.c, imf2x.c, x2imf.c, ximfapp.c, xshowimf.c (my_rid,
 	numremotes): Remove, no longer needed.

	* tkmain.c (tk_start_new_game): New tcl command.
	(check_network): Call popup_game_dialog instead of only removing
	splash screen items.

	* wconq.c (host_the_game): Register self as first remote program
	(try_join_game): Send a player spec to host.
	(launch_game_2): New function.
----------------------------
revision 1.5
date: 1999/09/04 13:40:55;  author: shebs;  state: Exp;  lines: +97 -93
        * history.h, kpublic.h, module.h, player.h, print.h, score.h,
        side.h, tp.h, ui.h, world.h: Remove PARAMS usages.
----------------------------
revision 1.4
date: 1999/07/03 12:44:06;  author: ronne;  state: Exp;  lines: +0 -7
Clean up file, remove old change markers.
----------------------------
revision 1.3
date: 1999/06/01 19:40:02;  author: shebs;  state: Exp;  lines: +9 -12
Tue Jun  1 18:41:59 1999  Hans Ronne  <ronne@bmc.uu.se>
	* combat.c, conq.h, game.h, help.c, init.c, keyword.def,
 	mkunits.c, move.c, mplayer.c, plan.def, read.c, run.c, run2.c,
 	score.c, side.h, supply.c, table.def, ui.c, unit.c, unit.h,
 	utype.def, world.c, world.h, write.c, maccmd.c, maccolors.c,
 	macconq.h, macdefs.h, macdraw.c, macinit.c. maclist.c, macmap.c,
 	macmenus.c, macmouse.c, macprefs.c, macrow.c. macwins.c: Remove
 	old change markers.
	* actions.c (transfer_supply): Disable use of indepside treasury.
	(do_create_in_action): Make separate call to has_advance_to_build.
	(do_create_in_action): Use the builders stash of cps if allowed.
	(do_create_in_action): Fix null side treasury crashes.
	(check_create_common): Make separate call to has_advance_to_build.
	(check_create_common): Fix null side treasury crashes.
	(set_created_unit_props): Turn on automation for indeps & AI
 	controlled sides.
	(do_create_at_action): Make separate call to has_advance_to_build.
	(do_create_at_action): Use the builders stash of cps if allowed.
	(do_create_at_action): Fix null side treasury crashes.
	(make_unit_complete): Fix null actionvector crashes at turn zero.
	(do_transfer_part_action): Make separate call to
 	has_advance_to_build.
	(check_change_type_action): Add separate call to
 	has_advance_to_build.
	* ai.c (numaitypes): Move to config.h to make it globally
 	accessible.
	(set_side_ai): Turn on automation for indeps & AI controlled
 	sides.
	(ai_update_plan): New function.
	(goal_truth): Handle GOAL_UNIT_OCCUPIED and GOAL_COLONIZE.
	(ai_init_shared): Call set_u_is_ground_mobile etc.
	(ai_init_shared): Set u_colonizer.
	(ai_init_shared): Call set_u_offensive_worth etc.
	(ai_init_shared): Set u_naval_mobile, u_ground_mobile and
 	u_facility.
	(offensive_worth): New function.
	(defensive_worth): New function.
	(exploring_worth): New function.
	(colonizing_worth): New function.
	(facility_worth): New function.
	(siege_worth): New function.
	(random_worth): New function.
	(set_u_offensive_worth): New function.
	(set_u_defensive_worth): New function.
	(set_u_explorer_worth): New function.
	(set_u_colonizer_worth): New function.
	(set_u_facility_worth): New unction.
	(set_u_random_worth): New function.
	(set_u_siege_worth): New function.
	(set_u_is_ground_mobile): New function.
	(set_u_is_naval_mobile): New function.
	(set_u_is_air_mobile): New function.
	(set_u_is_advanced): New function.
	(set_u_is_colonizer): New function.
	(set_u_is_facility): New function.
	* ai.h (a_ai_op): Add (*to_update_plan).
	(ai_update_plan): Prototype new function.
	(offensive_worth, defensive_worth, etc): New prototype.
	* combat.c (do_overrun_action): Make ovverun after fire possible.
	(check_overrun_action): Make overrun after fire & into empty cell
 	possible.
	(do_fire_at_action): Use SideMask code to handle fire display.
	(do_fire_at_action): Permit attempt to capture after fire from
 	adjacent cell.
	(do_fire_into_action): Use SideMask code to handle fire display.
	(maybe_hit_unit): Support uu_cellwide_protection_against.
	(maybe_hit_unit): Support uu_cellwide_protection_for.
	(maybe_hit_unit): Use SideMask code to handle hit display.
	(maybe_hit_unit): Fix occupant recursion bug.
	(attempt_to_capture_unit): Support uu_cellwide_protection_against.
	(attempt_to_capture_unit): Support uu_cellwide_protection_for.
	(detonate_on_cell): Use for_all_stack_with_occs instead of
 	for_all_stack.
	(can_capture_directly): New function.
	(type_can_capture_directly): New function.
	(type_can_carry): New function.
	(occ_can_defend_transport): New function.
	* config.h (MAXATYPES): Increase to 254.
	(numaitypes): Move here from ai.c to make it globally accessible.
	* conq.h (advanced_utypes etc): Remove.
	(numadv etc): Remove.
	(can_extract_at): Prototype.
	(can_load_at): Prototype.
	(can_capture_directly): Prototype.
	(type_can_capture_directly): Prototype.
	(type_can_carry): Prototype.
	(occ_can_defend_transport): Prototype.
	(has_advance_to_build): Prototype.
	(unit_actually_visible): New prototype.
	* game.h (for_all_advanced_utypes, etc): Remove.
	* goal.def (GOAL_UNIT_OCCUPIED, GOAL_COLONIZE): New goals.
	* gvar.def (g_default_runlength): New name for
 	g_ai_build_runlength.
	(g_disable_standard_economy): New gvar.
	(g_disband_unfinished_units): New gvar.
	(g_salvage_unfinished_cps): New gvar.
	(g_salvage_unfinished_materials): New gvar.
	(g_ai_advanced_unit_separation): New gvar.
	(g_ai_badtask_remove_chance): New gvar.
	(g_ai_badtask_max_retries): New gvar.
	(g_ai_badtask_reserve_chance): New gvar.
	(g_units_may_go_into_reserve): New gvar.
	(g_units_may_go_to_sleep): New gvar.
	* help.c (may_detonate): Prototype.
	(describe_utype): Make display of Material Handling conditional.
	(describe_utype): Add "None" option to required advances code.
	(u_property_desc, etc): Add spaces after commas to permit new
 	lines.
	(append_help_phrase): Add more dashes and an extra linefeed.
	* imf.c (interp_image): Disable palette run warning on the Mac.
	* init.c (advanced_utypes etc): Remove.
	(final_init): Remove call to setup_utype_vectors.
	(setup_utype_vectors): Remove function.
	* kernel.h (go_after_captive): New prototype.
	(attack_can_damage_or_capture): New prototype.
	(fire_can_damage_or_capture): New prototype.
	(real_capture_chance): New prototype.
	* keyword.def (K_AUTOPLAN): New keyword.
	(K_CP_STASH): New keyword.
	* kpublic.h (net_resume_build_task): New extern prototype.
	* mac.c: Include MacTypes.h ifdef NEW_HEADERS, else include
 	Types.h.
	* mkunits.c (make_countries): Add separate call to
 	has_advance_to_build.
	(place_unit): Add separate call to has_advance_to_build.
	* move.c (do_move_action): Fix u2->nu2 typo & remove nu2
 	declaration.
	(do_enter_action): Fix u2->nu2 typo & remove nu2 declaration.
	* mplayer.c: Include kernel.h.
	(assign_to_defend_unit): Prototype new function.
	(assign_to_defend_cell): Prototype new function.
	(assign_to_defend_vicinity): Prototype new function.
	(mplayer_update_plan): Prototype new function.
	(defended_by_occupants): Prototype new function.
	(mplayer_ops): Add mplayer_update_plan.
	(update_unit_plans_randomly): Support g_units_may_go_into_reserve.
	(update_unit_plans_randomly): Support g_units_may_go_to_sleep.
	(mplayer_decide_plan): Skip for advanced units.
	(mplayer_decide_plan): Use u_colonizer_worth instead of
 	u_colonizer.
	(mplayer_update_plan): New function.
	(need_this_type_to_build_explorers): Check that we can build the
 	desired type.
	(assign_to_colonize): Rewrite. Use GOAL_COLONIZE and
 	PLAN_COLONIZING.
	(assign_to_improve): Clear task agenda and set NULL goal.
	(type_can_build_attackers): Check that we can build the desired
 	type.
	(type_can_build_colonizers): Add separate call to
 	has_advance_to_build.
	(type_can_build_colonizers): Use u_colonizer_worth instead of
 	u_colonizer.
	(preferred_build_type): Also count enemy occs by using
 	for_all_stack_with_occs.
	(preferred_build_type): Add separate call to has_advance_to_build.
	(preferred_build_type): Use u_colonizer_worth instead of
 	u_colonizer.
	(defended_by_occupants): New function.
	(assign_to_defense): Rewrite. Handle defense of units.
	(assign_to_defend_unit): New function.
	(assign_to_defend_cell): New function.
	(assign_to_defend_vicinity): New function.
	(assign_to_defend_theater): New function.
	(mplayer_adjust_plan): Skip for advanced units.
	(mplayer_adjust_plan): Add PLAN_COLONIZING & PLAN_IMPROVING.
	(mplayer_adjust_plan): Support g_units_may_go_into_reserve.
	(build_base_for_self): Check that we can build the desired type.
	(build_base_for_others): Check that we can build the desired type.
	(build_depot_for_self): Check that we can build the desired type.
	(rethink_plan): Support g_units_may_go_into_reserve.
	* plan.c: (execute_plan): Skip for advanced units.
	(execute_plan): Mark obsolete try code.
	(execute_plan): Support g_units_may_go_into_reserve.
	(execute_plan): Call ai_update_plan before execution.
	(plan_offense): Handle GOAL_UNIT_OCCUPIED and GOAL_CELL_OCCUPIED.
	(plan_offense): Support g_units_may_go_into_reserve.
	(plan_offense): Support g_units_may_go_to_sleep.
	(self_build_base_for_self): Check that we can build the desired
 	type.
	(plan_offense_support): Check that we can build the desired type.
	(plan_defense): Handle GOAL_UNIT_OCCUPIED and GOAL_CELL_OCCUPIED.
	(plan_defense): Call go_after_victim also for unit that can fire.
	(plan_defense): Use u_ai_tactical_range.
	(plan_defense): Support g_units_may_go_into_reserve.
	(plan_colonize): Rewrite. Use GOAL_COLONIZE.
	(plan_colonizer_support): Add separate call to
 	has_advance_to_build (2 times).
	(plan_colonizer_support): Use u_colonizer_worth instead of
 	u_colonizer.
 	(plan_improve): Add separate call to has_advance_to_build (2
 	times).
 	(good_cell_to_colonize): Rewrite. Check for presence of other
 	unit.  Check size goal for ALL advanced utypes. Remove check for
 	nearby enemy units.
	(plan_exploration): Support g_units_may_go_into_reserve.
	(plan_exploration): Handle GOAL_UNIT_OCCUPIED and
 	GOAL_CELL_OCCUPIED.
	(plan_exploration): Support g_units_may_go_to_sleep.
	(plan_explorer_support): Check that we can build the desired type.
	(victim_here): Also count with damage by fire and damage to occs.
	(victim_here): Give large size units higher rating.
	(victim_here): Give independent units lower rating.
	(victim_here): Give units that threaten our advanced units higher
 	rating.
	(go_after_captive): New function.
	(target_here): Also count with damage by fire and damage to occs.
	(target_here): Give large size units higher rating.
	(target_here): Give independent units lower rating.
	(target_here): Give units that threaten our advanced units higher
 	rating.
 	(capture_indep_if_nearby): Use u_ai_tactical_range.
 	(capture_useful_if_nearby): Use u_ai_tactical_range.
	* read.c (interp_unit): Restore code where ids start at 1 instead
 	of 0.
	(interp_unit): Add K_CP_STASH & K_AUTOPLAN.
	* run.c (unit_plan_dialog): New extern prototype.
	(net_resume_build_task): New extern prototype.
	(has_advance_to_research): New prototype.
	(select_by_weight): Prototype extern.
	(unit_build_dialog): Change prototype so that it returns int.
	(has_advance_to_build): Remove prototype.
	(create_selected_unit): Remove function and prototype.
	(auto_pick_new_plan): New function and prototype.
	(set_new_build_task): Remove function and prototype.
	(run_advanced_units): Enable run_construction for UNIX again.
	(run_population): Fix indepside crashes.
	(run_construction): Completely rewritten & extensively debugged.
	(auto_pick_new_research): Rewrite so that random task is picked.
	(auto_pick_new_build_task): Rewrite. Call auto_pick_new_plan.
	(auto_pick_new_plan): New function.
	* run2.c (vary_winds): Prototype.
	(update_area_display): Prototype extern.
	(run_turn_start): Check g_disable_standard_economy.
	* side.c (update_area_display): Prototype extern.
	(create_side): Fix toggle AI bug by initializing
 	newside->prefixarg.
	(side_controls_unit): Give debuggers full control.
	(side_sees_unit): Include trusted side, debuggers, g_peek_at_enemy
 	and endofgame.
	* side.h (has_advance): Fix null side crashes.
	* table.def (uu_builder_can_reuse_cp): New table.
	(uu_cellwide_protection_against): New table.
	(uu_cellwide_protection_for): New table.
	* task.c (attack_can_damage_or_capture): Move prototype to
 	kernel.h.
	(do_hit_unit_task): Count with fire and capture at pointblank
 	range.
	(do_hit_unit_task): Fix firing range bug.
	(do_hit_unit_task): Move in to capture if unit is undefended.
	(attack_can_damage_or_capture): Do attack if occ can be damaged.
	(fire_can_damage): Do attack if occ can be damaged.
	(fire_can_damage_or_capture):New function.
	(real_capture_chance): New function.
	(execute_task): Support g_ai_badtask_remove_chance.
	(execute_task): Support g_ai_badtask_max_retries.
	(execute_task): Support g_ai_badtask_reserve_chance.
	(execute_task): Support g_units_may_go_into_reserve.
	(set_build_task): Rewrite. Optionally disband any salvage
 	unfinished unit.
	(push_build_task): Rewrite. Optionally disband any salvage
 	unfinished unit.
	(set_occupy_task): New function.
	* tp.c (net_resume_build_task): New function (prototyped in
 	kpublic.h).
	* ui.c: Include MacTypes.h ifdef NEW_HEADERS, else include
 	Types.h.
	(xform_cell): Move core calculations to new function
 	xform_cell_flat.
	(xform_cell_flat): New function.
	(xform_cell_fractional_flat): New function.
	(favored_type): Check that we can build the desired type.
	* ui.h (xform_cell_flat, xform_cell_fractional_flat): New
 	prototypes.
	* unit.c (default_size): Change from 0 to 1.
	(has_advance_to_build): Remove prototype.
	(create_unit): Initialize unit->autoplan.
	(create_unit): Initialize unit->cp_stash.
	(can_carry): Check for u_facility_total_max & u_mobile_total_max.
	(type_can_occupy): Check for u_facility_total_max &
 	u_mobile_total_max.
	(type_allowed_on_side): Remove call to has_advance_to_build.
	(set_unit_side): Turn on autobuild & autoresearch if side is under
 	AI control.
	* unit.h (a_unit): Add unit->cp_stash.
	(a_unit): Add unit->autoplan.
	(for_all_occs_with_occs): Define new macro.
	(type_ever_available): Prototype extern.
	* utype.def (u_offensive_worth): New utype property.
	(u_defensive_worth): New utype property.
	(u_explorer_worth): New utype property.
	(u_colonizer_worth): New utype property.
	(u_facility_worth): New utype property.
	(u_random_worth): New utype property.
	(u_siege_worth): New utype property.
	(u_offensive): Change default from 1 to 0.
	(u_explorer): Change default from 1 to 0.
	(u_besieger): New utype property.
	(u_ship): New utype property.
	(u_ground): New utype property.
	(u_air): New utype property.
	(u_facility_total_max): New utype property.
	(u_mobile_total_max): New utype property.
	(u_ai_min_defenders) : Ner utype property.
	(u_ai_tactival_range): New utype property.
	* world.c (latlong_to_xy): Fix meridian drawing bug.
	* world.h (cell_is_within_n_steps): Rename to
 	cell_is_within_range.
	(for_all_cells_within_n_steps): Rename to
 	for_all_cells_within_range.
	(for_all_stack_with_occs): Define new macro.
	* write.c (write_area_users): Change so that nextid starts at 1
 	instead of 0.
	(write_units): Restore old code so that nextid starts at 1 instead
 	of 0.
	(write_unit_properties): Add K_AUTOPLAN & K_CP_STASH.
	* macadv.c: (MAX_DISPLAYED_FACS): New macro constant.
	(MAX_DISPLAYED_OCCS): New macro constant.
	(CLEAR_AGENDA): New macro constant.
	(unit_build_dialog): Change prototype.
	(has_advance_to_build): Remove prototype.
	(create_selected_unit): Remove prototype.
	(copy_rect_from_gworld): New function and prototype.
	(city_dialog): Rewrite. Many bug fixes and improvements.
	Most important ones:  Add conditional call to draw_unit_info.
	Use backcolor to draw region outside the area in the city map.
	Use copy_rect_from_gworld to do the offscreen graphics.
	Disable all auto checkboxes when dside is under AI control.
	Check that unit has a plan. Add new Plan Type popup menu.
	Add new Autoplan checkbox. Add new AI control checkbox.
	Split occupant panel into facilities and garrison panels.
	Fix runlength bug and limit it to CLEAR_AGENDA.
	Call net_clear_task_agenda & net_set_unit_asleep for idle units.
	Add separate call to has_advance_to_build.
	(draw_city_statistics): Rewrite. Many bug fixes and improvements.
	Most important ones: Add drawing of unit icon.
	Fix sporadic name bug by call to side_adjective.
	Fix parenthesis bug in construction status field.
	Fix crashing bug in occupant display code.
	Use u_facility_worth instead of !mobile to identify facilities.
	Add AI control info text field.	 Add new facilities and garrison
	panels.
	Fix bugs in construction status.
	Use white background color with unit icons.
	Add cps to occupant names when debugging.
	(draw_landuse_near_unit): Rename macro to for_all_cells_within_range.
	(unit_build_dialog): Rewrite. Many bug fixes. return int instead
	of *unit.
	Add separate call to has_advance_to_build.
	(unit_plan_dialog): New function and prototype.
	(global_advance_dialog): Fix autoresearch bug.
	Fix crashes due to incorrect oldprojects[] array size.
	Move SetPort call to position after conditional return.
	Fix sporadic name bug by two calls to side_adjective.
	* maccmd.c (do_set_view_angle): Only set vertscale if given a
 	valid prefixarg.
	* maccolors.c (default_draw_ai): Initialize to TRUE.
	(alert_256_colors): Initialize to TRUE.
	* macconq.c (main): Move check_screen_depths after get files and
 	make conditional.
	(update_area_display): Prototype extern. Add Side parameter.
	* macconq.h: Include MacWindows.h ifdef NEW_HEADERS, else include
 	Windows.h.
	(a_map): Add map->draw_ai.
	(default_draw_ai): New extern.
	(alert_256_colors): New extern.
	(xform_fractional): Move prototype here.
	(xform_flat): New prototype.
	(xform_fractional_flat): New prototype.
	* macdefs.h: (mPlanTypePopup): New menu.
	(miPlanTypeColonizing): New menu item.
	(miPlanTypeImproving): New menu item.
	(miPlanTypeRandom): New menu item.
	(diPrefsAIRegions): New dialog item.
	(diPrefs256colors): New dialog item.
	(dCity): All dialog items renumbered and renamed.
	(dPlan): New dialog with 3 dialog items.
	* macdraw.c (draw_unit_image): Rewrite. Support sidecolors in
 	closeups etc.
	(draw_unit_image): Restore colors BEFORE calling gray_out_rect (2
 	times).
	(draw_unit_image): Fix emblem bug due to new emblem_position code.
	* maclist.c (create_list): Use GetNewCWindow if hasColorQD.
	(draw_unit_list_entry): Fix task_desc prototype error.
	* macmap.c (xform_fractional): Move prototype to macconq.h.
	(xform_flat): New function.
	(xform_fractional_flat): New function.
	(adjust_latlong_interval): New function and prototype.
	(create_map): Use default_draw_ai.
	(create_map): Call adjust_latlong_interval.
	(set_map_power): Call adjust_latlong_interval.
	(set_map_angle): Compute a suitable vertscale.
	(draw_meridians): Fix sporadic longitude top error.
	(draw_meridians): Call xform_fractional_flat instead of
 	xform_fractional.
	(draw_selections_at): Fix (x,y) bug.
	(draw_selected_unit): Draw enemy units in red.
	(draw_selection_animation): Draw enemy units in red.
	(update_cell): Make DestRect larger to include row below.
	(update_cell): Use UNWRAP_RECT for meridians & feature names.
	* macmenus.c: (all_ai_ops): Prototype extern for use in
 	build_ai_type_menu.
	(query_position_modally): Unselect all selected units outside our
 	control.
	(do_closeup_mi): Prototype extern for use in ctrl-clicking of
 	unit.
	(build_ai_type_menu): Load AIs dynamically to the menu.
	(do_menu_command): Add support for dynamically loaded AIs.
	(do_menu_command): Support PLAN_COLONIZING & PLAN_IMPROVING.
	(apply_to_all_selected): Don't apply to selected units that we
 	don't control.
	(do_closeup_mi): Remove static declaration.
	(adjust_menus): Add support for dynamically loaded AIs.
	(adjust_menus): Don't enable commands for enemy unit closeups.
	(enable_commands_for_unit): Support PLAN_COLONIZING &
 	PLAN_IMPROVING.
	(enable_commands_for_unit): Fix menu number bug that disables More
 	menu items.
	* macmouse.c (do_closeup_mi): Prototype extern for use in
 	ctrl-clicking of unit.
	(do_mouse_down_map_content): Disable move and fire cmds for
 	selected enemy units.
	(do_mouse_down_map_content): Rewrite ctrl-clicking code using
 	side_sees_unit.  Call do_closeup_mi if ctrl-clicking non-advanced
 	unit, else call city_dialog.
	(select_all_units_in_rect): Always permit this if side_sees_unit.
	* macprefs.c (interp_mac_ui_data): Support default_draw_ai &
 	alert_256_colors.
	(ui_update_state): Support default_draw_ai & alert_256_colors.
	(set_preferences): Add case diPrefsAIRegions & diPrefs256colors.
	(set_preferences): Support default_draw_ai & alert_256_colors.
	(add_preferences_topic_items): Support default_draw_ai &
 	alert_256_colors.
	* macrow.c (draw_cliffs): Fix ouside-area crashes.
	(draw_contours): Trigger unwrapping 1 hex from right edge.
	(draw_gridlines): Trigger unwrapping 1 hex from right edge.
	(draw_shorelines): Trigger unwrapping 1 hex from right edge.
	(draw_feature_boundary_simple): Trigger unwrapping 1 hex from
 	right edge.
	* macwins.c (closeupwinwid): Change to 340.
	(init_construction_lists): Add separate call to
 	has_advance_to_build.
	(adjust_construction_controls): Check that we can build the
 	desired type.
	(side_rename_dialog): Fix colorscheme bug.
	(preferred_closeup_size): Add 4 pixels at bottom.
	(draw_unit_closeup): Make sure this is the selected unit on all
 	maps.
	(draw_unit_closeup): Optionally permit peeking at enemy units.
	(draw_unit_closeup): Fix duplicate goal_desc problem.
	(draw_unit_closeup): Align goal_desc and remove flanking junk.
	(draw_unit_closeup): Align task_desc and write "Task".
	(do_mouse_down_unit_closeup): Make sure this is the selected unit
 	on all maps.
	(destroy_unit_closeup): Make sure this is the selected unit on all
 	maps.
	* XconqProj.rsrc: (DITL 803 "City"): Extensively modified.
	(DITL 702 "Preferences Map Items"): Add AI regions checkbox.
	(DITL 704 "Preferences Offscreen Items"): Add recommend 256 colors
 	checkbox.
	(DITL 804 "City Research"): Minor changes.
	(DITL 805 "Global Science"): Minor changes.
	(DITL 807 "City Build"): Minor changes.
	(DITL 808 "City Plan"): New dialog item list.
	(DLOG 808 "City Plan"): New dialog.
	(MENU 206 "AI Types"): Remove static AI items.
	(MENU 249 "Plan Types"): Restore damaged resource. Add 3 new
 	items.
	* Xconq.r: Update from XconqProj.rsrc.
	* xconq.c (unit_build_dialog): Rewrite. Fix argument error.
	(unit_plan_dialog): New function.
----------------------------
revision 1.2
date: 1999/05/11 19:53:55;  author: shebs;  state: Exp;  lines: +8 -7
	* cmd.def (agreement-draft, agreement-drafter, agreement-propose,
	agreement-proposer, agreement-sign, agreement-signer,
	agreement-term): New commands.
	* cmd.c (do_agreement_draft, do_agreement_drafter, etc): New
	functions.
	* cmdline.c (parse_command_line): Handle -h by creating player
	specs immediately.
	* side.h (agreement_list, etc): Rename from agreementlist etc.
	* side.c (agreement_list, etc): Ditto.
	(find_agreement): New function.
	(create_agreement): Fix.
	* ui.h (VP see_all): New slot.
	* ui.c (find_unit_or_occ): Add side arg, account for occupant
 	visibility rules.
	Change all callers.
	(calc_view_misc): Comment out hexagon_adjust, seems unneeded.
	* write.c (write_agreements): Use for_all_agreements.
----------------------------
revision 1.1
date: 1999/04/28 19:36:33;  author: shebs;  state: Exp;
Initial checkin.
=============================================================================
