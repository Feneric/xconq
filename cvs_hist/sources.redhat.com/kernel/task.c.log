
RCS file: /cvs/xconq/xconq/kernel/task.c,v
Working file: task.c
head: 1.92
branch:
locks: strict
access list:
symbolic names:
	xconq-7_4_1-release: 1.33
	xconq-7_4-branch: 1.33.0.2
	xconq-7_4-branchpoint: 1.33
	xtconq-pre-removal: 1.22
	xconq-7_3_3-release: 1.16
	xconq-7_3_2-release: 1.16
	xconq-7_3_1-release: 1.16
	xconq-7_3-branch: 1.16.0.2
	xconq-7_3-branchpoint: 1.16
keyword substitution: kv
total revisions: 92;	selected revisions: 92
description:
----------------------------
revision 1.92
date: 2004/08/20 23:26:12;  author: ronne;  state: Exp;  lines: +193 -49
Improved combat code part 1: TASK_ATTACK, TASK_FIRE, unit view clearance.
----------------------------
revision 1.91
date: 2004/08/19 00:58:57;  author: ronne;  state: Exp;  lines: +4 -2
Many bug fixes, some new features.
----------------------------
revision 1.90
date: 2004/07/23 19:24:17;  author: ronne;  state: Exp;  lines: +1 -1
Add/improve version string.
----------------------------
revision 1.89
date: 2004/07/19 22:36:57;  author: ronne;  state: Exp;  lines: +244 -226
Improve rearm and repair code.
----------------------------
revision 1.88
date: 2004/07/12 23:31:21;  author: ronne;  state: Exp;  lines: +8 -5
Improvements to resupply code and victim finding code.
----------------------------
revision 1.87
date: 2004/07/10 01:08:53;  author: ronne;  state: Exp;  lines: +109 -93
Improved resupply code.
----------------------------
revision 1.86
date: 2004/07/06 22:49:08;  author: ronne;  state: Exp;  lines: +24 -240
Simplify the hit-unit task code.
----------------------------
revision 1.85
date: 2004/07/02 00:20:24;  author: ronne;  state: Exp;  lines: +3 -9
Clean out some debugging code.
----------------------------
revision 1.84
date: 2004/07/01 23:18:56;  author: ronne;  state: Exp;  lines: +12 -6
More fixes to the unit view code.
----------------------------
revision 1.83
date: 2004/06/20 17:23:05;  author: mcdonald;  state: Exp;  lines: +14 -18
Cache results of recently added ACP and MP artithmetic functions.
Finish replacing 'u_acp' and 'u_speed' calls in the kerenl, where appropriate.
Minor fix to the help system.
New option for Wreckreation.
----------------------------
revision 1.82
date: 2004/06/15 04:14:22;  author: mcdonald;  state: Exp;  lines: +15 -4
Update player documentation.
Extend night and occupant effects on ACP.
Provide universal ACP arithmetic.
Update games in library to use some replacement tables.
Provide true capture prevention/allowance tables.
Provide toggle for use of combat protection tables in capture computations.
Allow units to change type on capture. Add new table for this.
Improvements and modifications to help system.
Improvements to and comments about type changing code.
Some housekeeping of the table definitions.
Source formatting improvments.
New version of Wreckreation.
----------------------------
revision 1.81
date: 2004/06/12 20:41:09;  author: ronne;  state: Exp;  lines: +3 -0
Various build and move related interface fixes.
----------------------------
revision 1.80
date: 2004/06/05 16:38:12;  author: ronne;  state: Exp;  lines: +19 -4
Various bug fixes.
----------------------------
revision 1.79
date: 2004/05/25 03:23:52;  author: mcdonald;  state: Exp;  lines: +13 -9
Work around a create/build bug caused by a faulty unit view macro.
(Bug reported by Jim.)
----------------------------
revision 1.78
date: 2004/05/21 20:40:51;  author: ronne;  state: Exp;  lines: +9 -3
Make the Curses interface build natively under Windows.
----------------------------
revision 1.77
date: 2004/05/20 04:24:53;  author: mcdonald;  state: Exp;  lines: +14 -48
Fix serious flaw in the evaluation of the fire task.
(Bug report submitted by Elijah Meeks.)
----------------------------
revision 1.76
date: 2004/05/17 20:25:31;  author: mcdonald;  state: Exp;  lines: +14 -26
More thoroughly fix multiple move in direction bug involving blockage.
----------------------------
revision 1.75
date: 2004/05/17 18:54:03;  author: mcdonald;  state: Exp;  lines: +78 -65
Fix create/build bug triggered by cancelling a unit's plan.
(Reported by Tom Low-Shang.)
----------------------------
revision 1.74
date: 2004/05/16 22:11:39;  author: mcdonald;  state: Exp;  lines: +4 -3
Fix bug that caused return for resupply to fail.
(Bug reported by Tom Low-Shang.)
----------------------------
revision 1.73
date: 2004/05/16 21:40:53;  author: mcdonald;  state: Exp;  lines: +60 -5
Fix bug in multiple movement which prevented passing through trusted units.
(Reported by Tom Low-Shang.)
----------------------------
revision 1.72
date: 2004/05/14 04:53:30;  author: mcdonald;  state: Exp;  lines: +3 -0
Fix construction run length bug reported by "Ed." on the mailing list.
Remove some assinity I recently introduced into the unit wake behavior.
----------------------------
revision 1.71
date: 2004/05/09 21:19:12;  author: mcdonald;  state: Exp;  lines: +15 -2
Fix movement bug.
----------------------------
revision 1.70
date: 2004/05/03 01:52:35;  author: mcdonald;  state: Exp;  lines: +3 -1
Fix human-controlled, ACP-indep building spree bug reported by Hans.
----------------------------
revision 1.69
date: 2004/05/02 22:19:19;  author: mcdonald;  state: Exp;  lines: +486 -230
Revert to the pathfinder in use prior to 2003/11/13.
Add appropriate replacements for useful elements of post-2003/11/13 pathfinder.
----------------------------
revision 1.68
date: 2004/04/30 04:26:09;  author: mcdonald;  state: Exp;  lines: +4 -3
Enhance occupant effects on speed.
Fix building bug related to recent changes.
----------------------------
revision 1.67
date: 2004/04/27 22:17:29;  author: ronne;  state: Exp;  lines: +18 -18
Fix runaway building bug for acp-independent units.
----------------------------
revision 1.66
date: 2004/04/27 04:34:11;  author: mcdonald;  state: Exp;  lines: +15 -13
Temp fix for unthrottled build problem with advanced units in some games.
Reformat some code to get replace of space-expanded tabs with real tabs.
----------------------------
revision 1.65
date: 2004/04/25 18:41:15;  author: mcdonald;  state: Exp;  lines: +34 -4
Be more conservative with resetting the 'creation_id' field.
Finish fixing misdirected creation/building bug.
Reformat some code to be readable under 80 columns.
----------------------------
revision 1.64
date: 2004/04/25 04:12:59;  author: mcdonald;  state: Exp;  lines: +21 -2
Fix "runaway creation spree" bug.
Fix harmless build glitch which allowed more CP than max.
Partially fix misdirected builds.
----------------------------
revision 1.63
date: 2004/04/21 03:49:29;  author: mcdonald;  state: Exp;  lines: +1 -1
Change usage of um_to_create to mirror um_to_build.
Allow direct consumption of materials from treasury sans storage in unit.
Fix bug that prevented unit creation in a certain case.
Reformat some code and comments to be readable on 80 col display.
Update games lib to reflect change in um_to_create usage.
Add another octal escape for a special Tcl character.
----------------------------
revision 1.62
date: 2004/04/02 20:16:19;  author: ronne;  state: Exp;  lines: +2 -1
Fix auto-repair related synch error.
----------------------------
revision 1.61
date: 2004/03/24 19:08:53;  author: ronne;  state: Exp;  lines: +6 -2
Improve common move-to and build command code.
----------------------------
revision 1.60
date: 2004/02/02 04:14:10;  author: mcdonald;  state: Exp;  lines: +37 -1
Add automatic unit type upgrade feature.
Add ability to apply new criteria to change-type action.
Add new safeguard to some materials-related functions.
Remove redundant checks from materials transfer code.
Remove extra paramter from some of the "assert_*" family of macros.
More preparations for more intelligent AI resupply code.
Update Bellum Aeternum to use automatic upgrades.
----------------------------
revision 1.59
date: 2004/01/26 02:02:17;  author: mcdonald;  state: Exp;  lines: +25 -2
Improve victim rating calculation.
Fix some bugs in victim seeking code.
Prepare for making AI more intelligent wrt resupply.
Fix strange movement bug.
Make Random plan more intelligent about certain task assignments.
Cancel a movement/resupply task combo, if it is no longer needed.
----------------------------
revision 1.58
date: 2004/01/19 21:07:36;  author: mcdonald;  state: Exp;  lines: +42 -12
Improve victim rating computation.
Improve performance of non-networked games.
Add new macro routines for debugging.
Add new search algorithm.
----------------------------
revision 1.57
date: 2004/01/10 20:49:10;  author: mcdonald;  state: Exp;  lines: +4 -1
Add new files for general AI/UI utility functions.
Start adding more AI-related functions to "ai_" namespace.
Include 'assert.h' in a master header instead of various and sundry sources.
Rewrite 'could_hit' in terms of new functions.
Begin migrating general AI/UI utility functions to 'aiutil'.
Create some new general AI/UI utility functions in 'aiutil'.
Improve victim finder by rejecting unreachable targets.
----------------------------
revision 1.56
date: 2004/01/05 23:36:37;  author: ronne;  state: Exp;  lines: +0 -2
Add pre-flight checks of move commands to the ui code.
----------------------------
revision 1.55
date: 2003/12/29 21:42:41;  author: mcdonald;  state: Exp;  lines: +25 -0
Make AI more intelligent regarding victim selection.
Add new function for searching a unit for particular task type.
----------------------------
revision 1.54
date: 2003/12/26 06:02:35;  author: mcdonald;  state: Exp;  lines: +67 -21
Rewritten victim-finding code for the AI.
The start of better resupply logic.
Improve and add some segfault prevention code.
Cosmetic improvements to some code.
Enhancements to Bellum Aeternum.
----------------------------
revision 1.53
date: 2003/12/01 01:20:24;  author: ronne;  state: Exp;  lines: +4 -2
Make it possible to save/restore network games.
----------------------------
revision 1.52
date: 2003/11/29 17:22:46;  author: mcdonald;  state: Exp;  lines: +19 -3
Fix crash from attempting to enter a dead transport.
Cosmetic improvement of a comment.
----------------------------
revision 1.51
date: 2003/11/29 06:25:04;  author: mcdonald;  state: Exp;  lines: +100 -69
Patch from Peter Garrone (modified) to better handle transports and b-slides.
----------------------------
revision 1.50
date: 2003/11/14 17:30:11;  author: ronne;  state: Exp;  lines: +9 -4
Fixes to the path-finding code.
----------------------------
revision 1.49
date: 2003/11/13 21:18:48;  author: ronne;  state: Exp;  lines: +115 -400
New path-finding code from Peter Garrone.
----------------------------
revision 1.48
date: 2003/10/18 16:59:40;  author: ronne;  state: Exp;  lines: +27 -16
Overhaul of material handling code.
----------------------------
revision 1.47
date: 2003/08/18 20:13:41;  author: ronne;  state: Exp;  lines: +1 -1
Various cleanups and bug fixes.
----------------------------
revision 1.46
date: 2003/08/11 22:34:16;  author: ronne;  state: Exp;  lines: +120 -20
Further improvements to resupply and repair code.
----------------------------
revision 1.45
date: 2003/08/06 00:18:20;  author: ronne;  state: Exp;  lines: +107 -29
Improve repair, resupply, AI and namer code.
----------------------------
revision 1.44
date: 2003/06/18 20:46:37;  author: ronne;  state: Exp;  lines: +3 -3
Fix restore of saved unit views.
----------------------------
revision 1.43
date: 2003/04/26 16:03:18;  author: ronne;  state: Exp;  lines: +6 -6
Improve struct UnitView and clean out obsolete macros.
----------------------------
revision 1.42
date: 2003/01/22 23:01:05;  author: ronne;  state: Exp;  lines: +2 -0
Fixes to imaging and build code.
----------------------------
revision 1.41
date: 2002/07/21 22:15:24;  author: ronne;  state: Exp;  lines: +1 -1
More ai bug fixes.
----------------------------
revision 1.40
date: 2002/07/05 22:30:13;  author: ronne;  state: Exp;  lines: +1 -2
Fixes to reserve and sleep code.
----------------------------
revision 1.39
date: 2002/05/08 23:51:17;  author: ronne;  state: Exp;  lines: +3 -3
Make sources C++ compatible.
----------------------------
revision 1.38
date: 2002/03/29 17:45:20;  author: ronne;  state: Exp;  lines: +1 -1
Streamline network code.
----------------------------
revision 1.37
date: 2002/03/17 21:02:00;  author: ronne;  state: Exp;  lines: +2 -2
Tweak notification output.
----------------------------
revision 1.36
date: 2002/03/10 20:44:01;  author: ronne;  state: Exp;  lines: +1 -1
Various pre-release bug fixes.
----------------------------
revision 1.35
date: 2002/02/17 00:25:43;  author: ronne;  state: Exp;  lines: +7 -6
Fix sync errors and lockups in network code.
----------------------------
revision 1.34
date: 2001/08/19 02:13:08;  author: kingdon;  state: Exp;  lines: +13 -3
	Get the AI to repair its units better:
	* lib/stdunit.g: Up repair-percent to 75 - much too easy to kill
	off bombers (and others) at the default 35.
	* kernel/ai.c (ai_decide_plan): Call ai_react_to_action rather
	than duplicating the code which calls defensive_reaction &c.  This
	is so that we check for whether we are looking for repair.
	* kernel/task.c (do_repair_task): Only look for repair from a
	transport which can provide it.
	* kernel/task.c (do_repair_task): Unless we are above
	repair_percent, we haven't repaired enough.  Also round up on the
	80% check - otherwise 1/2 is considered to be >= 80% for example.
----------------------------
revision 1.33
date: 2000/12/07 17:07:52;  author: shebs;  state: Exp;  lines: +5 -4
	* ai.c (enemy_close_by): Pass correct values to victim_here.
	* task.c (do_capture_task): Test for enemy sides specifically,
	also fix typo in unit type test.
----------------------------
revision 1.32
date: 2000/12/04 17:50:21;  author: shebs;  state: Exp;  lines: +3 -1
	* task.def: Revert the mistaken task argtypes changes, add some
	comments.
	* unit.h: Add some comments.
	* task.c: Add a couple comments.
----------------------------
revision 1.31
date: 2000/12/03 23:36:20;  author: ronne;  state: Exp;  lines: +7 -7
Fix some problems with capture code.
----------------------------
revision 1.30
date: 2000/11/30 17:08:26;  author: shebs;  state: Exp;  lines: +3 -1
	* unit.h (ai_controlled): New macro.
	* ai.c, iplayer.c, mplayer.c, plan.c, run.c, macunit.c: Use it
	everywhere.

	* ai.c (offensive_worth, defensive_worth): Break complicated
	expressions into several statements.
	* iplayer.c (iplayerinited): Remove, never used.
	(iplayer_react_to_new_side, iplayer_save_state,
	iplayer_theater_at, iplayer_at_desig): Remove, never used.
	* run.c (move_one_unit_multiple): Rework test of AI units
	needing to run task reactions.
	* task.c (execute_task): Don't skip to task reaction if unit
	is not AI controlled.
----------------------------
revision 1.29
date: 2000/11/20 03:40:47;  author: shebs;  state: Exp;  lines: +36 -50
	* task.c (compare_directions): Add a preference to move over
	uncontrolled cells.
----------------------------
revision 1.28
date: 2000/11/16 23:33:12;  author: ronne;  state: Exp;  lines: +8 -2
General cleanup of kernel prototypes - part 2.
----------------------------
revision 1.27
date: 2000/11/12 00:39:54;  author: ronne;  state: Exp;  lines: +0 -13
General cleanup of kernel prototypes - part 1.
----------------------------
revision 1.26
date: 2000/11/05 20:26:03;  author: shebs;  state: Exp;  lines: +8 -4
	Improve the success rate of transports picking up occupants.
	* task.def (pickup): Add a direction choice argument.
	* task.c (do_pickup_task): Add an approach subtask.
----------------------------
revision 1.25
date: 2000/10/30 16:28:29;  author: shebs;  state: Exp;  lines: +3 -3
	* goal.def (DEF_GOAL): Add a separate display name for each goal.
	* unit.h (GoalDefn): New field display_name.
	* unit.h, ai.c: Update uses of DEF_GOAL.
	* task.def (DEF_TASK): Add a separate display name for each task.
	* unit.h (TaskDefn): New field display_name.
	* kernel.h, kpublic.h, unit.h, task.c: Update uses of DEF_TASK.
	* nlang.c (task_desc): Use display name instead of internal name.
	(goal_desc): Likewise.
	* side.c (standing_order_desc): Likewise.
----------------------------
revision 1.24
date: 2000/09/14 18:46:26;  author: ronne;  state: Exp;  lines: +3 -1
Fix hangs in acp-independent construction.
----------------------------
revision 1.23
date: 2000/09/10 05:45:40;  author: shebs;  state: Exp;  lines: +4 -5
	Random rewrites and reorgs resolving remote networking bugs.
	* ai.c (init_ai): Fill in side->rai for remote AIs.
	(set_side_ai): Simplify, and add feedback on results.
	(run_local_ais, run_ai_plan_adjust): Move here from run.c,
	test taskexecs instead of need_ai_task_reaction.
	* cmd.c (do_ai_side): Fix player feedback to reflect that
	network roundup may be necessary before state changes.
	* cmdline.c (option_width, option_height, option_circumference):
	New globals.
	(parse_world_option): Set these instead of pushing a variant.
	(set_variants_from_options): Call net_set_variant_value instead
	of pushing variant settings.
	(find_variant_from_name): New function.
	* init.c (start_player_pre_setup_stage): Call do_module_variants.
	(final_init): Report more data structure sizes.
	* kernel.h (set_variant_value): Declare.
	* kpublic.h (net_set_variant_value): Declare.
	* module.h (Variant newvalues): New field, array of new settings
	for variant.
	* module.c (create_game_module): Store a copy of the module name.
	(set_variant_value): Move here from tkmain.c.
	(do_one_variant): Fill from newvalues fields.
	* read.c (interp_variant_defns, add_std_var): Fill in newvalues
	fields.
	* run.c (latest_action_x, latest_action_y): New globals.
	(num_local_ais): Move to ai.c.
	(need_ai_task_reaction): Remove, use taskexecs instead.
	(save_run_state, clear_task_outcomes): New functions.
	(run_game): Call them.
	(move_one_unit_multiple): Replace need_ai_task_reaction test
	with last_task_outcome and AI usage test.
	(run_side_research, run_construction): Test local AI instead
	of AI in general (dubious).
	* side.h (Side rai): New field.
	(side_has_ai): Test both local and remote AI.
	(side_has_local_ai): New macro.
	* task.c (execute_task): Rework recording of task outcome.
	* tp.h (RAI): New struct, placeholder "remote AI".
	* tp.c: Change run warnings into notices.
	(net_set_variant_value): New function.
	(receive_variant_settings): Allow at most three values.
	* write.c (write_side_properties): Only write AI state for
	local AIs (dubious).

	* tkconq.tcl: Rewrite variant handling to do more work in
	kernel.
	(set_variant_value_cmd): New proc, replaces broadcast_variant_value.
	(set_variants): Do less.
	(add_world_size_dialog_items): Comment out lat/lon items.
	(insert_chat_string): Test for existence of window before insert.
	* tkmain.c: Rewrite for variants also.
	(send_value_value, implement_variants): Remove tcl commands.
	(tk_set_variant_value): Rewrite to pass along to kernel.
	(interpret_variants): Rewrite.
	(set_variant_world_size, set_variant_real_time): Remove,
	handled uniformly in kernel.
	(update_variant_setting): Rewrite.
----------------------------
revision 1.22
date: 2000/08/18 23:42:55;  author: ronne;  state: Exp;  lines: +7 -0
Move acp-indep builds to normal execution code.
----------------------------
revision 1.21
date: 2000/08/13 15:21:00;  author: shebs;  state: Exp;  lines: +46 -82
	Fix various bugs in unit viewing, especially for see_all case.
	* iplayer.c (can_see_actual_units): Remove, no longer used.
	(preferred_build_type): Test side->see_all.
	* mplayer.c (can_see_actual_units): Remove, no longer used.
	(review_theaters, estimate_strengths, preferred_build_type): Fix
	!side->see_all cases.
	* plan.c (victim_here): Remove a comment.
	* side.c (become_designer, become_nondesigner): Add notices
	to all sides.
	(unit_view_at, unit_view_next): Handle side->see_all case by
	faking view objects.
	(add_unit_view): Record the date of the unit view.
	* side.h: Add some comments.
	* task.c (do_hit_unit_task): Always use unit views.
	(parse_unit): Remove redundant see_all test.
----------------------------
revision 1.20
date: 2000/07/23 13:55:03;  author: shebs;  state: Exp;  lines: +2 -2
	Increase unit ids to 32 bits in size.
	* unit.h (Unit id): Declare as int instead of short.
	(UnitView id): Ditto.
	(Action actee, args): Ditto.
	(Task args): Ditto.
	* history.h (HistEvent data): Ditto.
	(PastUnit id): Ditto.
	* world.h (Area user): Ditto.
	* tkconq.h (Map curunit_id, argunitid): Ditto.
	* xtconq.h (Map argunitid): Ditto.
	* plan.c (make_plausible_random_args): Declare args arg as int.
	* task.c (do_approach_subtask): Declare statep arg as int.
	* unit.c (create_unit): Add note about id overflow.
----------------------------
revision 1.19
date: 2000/07/11 17:16:31;  author: shebs;  state: Exp;  lines: +30 -27
	* task.c (do_move_to_task): Rewrite destination handling to try
	normal move always, and to not attack automatically.
----------------------------
revision 1.18
date: 2000/07/08 12:20:34;  author: shebs;  state: Exp;  lines: +2 -0
	* combat.c: Tweak formatting.
	* plan.c (victim_here): Loop over unit views, comment out
	test of unit size since it looks at unit directly.
	(victim_x, victim_y, victim_rating, etc): Rename from victimx etc.
	(target_here): Loop over unit views.
	(target_x, target_y, target_rating, etc): Rename from targetx etc.
	* iplayer.c (iplayer_go_after_victim, iplayer_fire_at_opportunity,
	enemy_close_by): Declare victim_rating etc in scope of functions.
	* mplayer.c: Ditto.
	* task.c (do_hit_unit_task): Add notes about views.
	* ui.c (find_unit_or_occ_view, find_unit_view_at,
	nearest_unit_view): New functions.
	(oneliner): Call nearest_unit_view, test for unit views instead
	of units_visible.
	(dump_text_view): Similarly.

	* tkmain.c (update_mouseover): Use unit views to decide whether
	cursor is over an attackable unit.
	* tkmap.c (draw_units): Almost always use unit views (exception is
	vp->show_all).
----------------------------
revision 1.17
date: 2000/07/03 16:43:38;  author: shebs;  state: Exp;  lines: +6 -18
	Change unit viewing to use view objects instead of a layer.
	* unit.h (UnitView): New struct.
	* side.h (Side unitview, unitviewdate): Remove.
	(Side unit_views): New field.
	(for_all_view_stack): New macro.
	(unit_view, set_unit_view, builduview, vside, vtype, vhp, EMPTY,
	appears_empty, vside_indep, unit_view_date, set_unit_view_date):
	Remove, no longer used.
	* config.h (MAXVIEWHISTORY): Remove, no longer used.
	* side.c (init_view): Remove unit view layer init.
	(unit_view_at, unit_view_next, add_unit_view, remove_unit_view,
	mistake_view): New functions.
	(fn_set_unit_view, fn_set_unit_view_date): Remove.
	(side_sees_image, all_see_leave, reset_all_views,
	react_to_seen_unit, see_cell, see_exact, paint_view_1): Rewrite to
	use view objects.
	* ai.c (enemies_present): Ditto.
	* iplayer.c (preferred_build_type): Ditto.
	* mkroads.c (unit_sees_other_unit): Ditto.
	* mplayer.c (review_theaters, estimate_strengths,
	preferred_build_type): Ditto.
	* plan.c (alternate_target_here, victim_here, target_here,
	indep_captureable_here, useful_captureable_here,
	can_capture_neighbor): Ditto.
	* ps.c (sideno_of_seen_unit_at): Ditto.
	* run2.c (unit_revolt, visible_to): Ditto.
	* task.c (target_visible): Ditto.
	* ui.c (oneliner, dump_text_view
	* cdraw.c (draw_units, draw_legend, show_closeup): Ditto.
	* xdraw.c (draw_map_info, etc): Ditto.
	* macdesign.c (apply_designer_tool): Ditto.
	* macrow.c (draw_units): Ditto.
	* tkmain.c (update_mouseover): Ditto.
	* tkmap.c (draw_units, handle_designer_mouse_down): Ditto.
	(x_xform_unit_view): New function.

	* init.c (init_all_views): Fold in init_view_2, comment out
	unit view clearing.
	* plan.c (threat, usable_cell): Comment out, not used apparently.
	* read.c (fill_in_side): Comment out unit view reading.
	* ui.c, ui.h (xform_unit_view_: New function.
	(utype_seen_at): Comment out unit view case.
	* write.c (fn_unit_view, fn_unit_view_date): Remove.
	(write_side_view): Write unit view list instead of layer.

	* cmdline.h (make_default_player_spec): Move decl to here
	from cmdline.c.
	* skelconq.c, wconq.c, xconq.c, xtconq.c, xtmain.c: Remove decls
	that are in cmdline.h.
	* tkmain.c: Ditto, and include cmdline.h.
	* cconq.c (make_default_player_spec): New function.

	* tkmain.c (tk_reset_popup_flag): New tcl command.

	* nlang.c (medium_long_unit_handle): Remove unused local.
----------------------------
revision 1.16
date: 2000/04/25 15:42:19;  author: shebs;  state: Exp;  lines: +43 -40
	* task.c (do_build_task): Explain task failure for units that
	can't develop.
----------------------------
revision 1.15
date: 2000/04/06 13:09:12;  author: shebs;  state: Exp;  lines: +9 -12
	* game.h (for_all_border_types, for_all_connection_types): Move
	to here from supply.c.
	* generic.c (first_bord_type, next_bord_type, first_conn_type,
	next_conn_type): New globals.
	* world.c (count_terrain_subtypes): Calculate values for these.
	* supply.c (optimize_terrain): Remove, no longer needed.
	* move.c, nlang.c, ps.c, run.c, task.c, ui.c, unit.c, macrow.c:
	Use the macros everywhere.
	* nlang.c (linear_desc): Comment out info about directions.
	(location_desc): Attach linear desc to terrain name only.
	* ui.c (toggle_user_at): Add error messages for failures.
----------------------------
revision 1.14
date: 2000/03/11 17:27:26;  author: shebs;  state: Exp;  lines: +62 -71
	* task.c (do_build_task): Test requested location before
	doing create-in, try all directions if no location for a
	create_at.
----------------------------
revision 1.13
date: 2000/03/05 15:32:48;  author: shebs;  state: Exp;  lines: +89 -123
	* task.def (TASK_BUILD): Add args for location at which to build.
	* task.c (do_build_task): Pass location to create-at action.
	* iplayer.c, mplayer.c, kpublic.h, plan.c, task.c, tp.c,
	ccmd.c, macunit.c, macwins.c, tkcmd.c, xcmd.c: Update all calls.

	* task.def (TASK_DO_ACTION): Remove, never used.
	* task.c (do_action_task): Remove.
	* xcloseup.c: Remove ref.
----------------------------
revision 1.12
date: 2000/02/16 13:54:46;  author: shebs;  state: Exp;  lines: +2 -4
Tweaks suggested by Michael Bergbauer
----------------------------
revision 1.11
date: 1999/12/25 13:48:55;  author: shebs;  state: Exp;  lines: +5 -0
        * combat.c (check_attack_action): Disallow direct unit attack
        if combat model 1.
        (model_1_attack): New function.
        (do_overrun_action): Use it.
        * task.c (do_hit_unit_task): Try to overrun if possible.
----------------------------
revision 1.10
date: 1999/12/14 03:18:14;  author: shebs;  state: Exp;  lines: +6 -0
	* task.c (do_build_task): Go into reserve if waiting to accmulate
 	building material.
----------------------------
revision 1.9
date: 1999/12/09 23:00:14;  author: shebs;  state: Exp;  lines: +16 -25
	* task.c (do_build_task): Keep working on task even if
	insufficient materials to create.
----------------------------
revision 1.8
date: 1999/12/02 03:14:19;  author: shebs;  state: Exp;  lines: +28 -19
	* task.c (plausible_move_dir): Use more accurate move costing
	to decide plausibility.
----------------------------
revision 1.7
date: 1999/10/30 14:41:46;  author: shebs;  state: Exp;  lines: +7 -7
        * combat.c (mobile_enemy_thread): Use side_sees_image instead of
        unit_actually_visible.
        * run.c (auto_pick_new_build_task, etc): Ditto.
        * task.c: Ditto.
        * side.c (side_sees_unit): Add side->see_all case, remove
        designer and debugging cases.
        (side_sees_image): Error if NULL side, add view-matching case.
        * ui.c (unit_actually_visible): Comment out.
        (unit_visible, occupants_visible): New function.
        (cell_terrain): Remove, fold code into oneliner.
        (oneliner): Test vp->show_all.
        * ui.h: Declare new functions.

        * conq.h (gameinited, warnings_logged): Declare.
        (add_remote_players, etc): Ditto.
        * cmd.c, cmdline.h, init.c, read.c, read2.c, side.c, unit.c,
        util.c: Remove unneeded decls.
        * misc.h (log_warning): Declare.
----------------------------
revision 1.6
date: 1999/09/16 02:47:45;  author: shebs;  state: Exp;  lines: +15 -15
	* conq.h, init.c, module.c, tp.c (typesdefined): Remove, never
 	actually used.

	* conq.h (enum setup_stage): New enum.
	(current_stage): New global.

	* imf.c, imf.h (get_img): Remove unused argument.
	* imf.c, ui.c, xcutil.c, ximf.c, maccolors.c, macimf.c, macinit.c,
 	tkimf.c: Fix all callers.

	* init.c, mac.c, mkrivers.c, mkroads.c, module.c. ps.c, score.c,
 	task.c: Remove PARAMS usages.

	* mac.c, win32.c (tmprid): Remove decl, never used.
	* cconq.c (hosting): Remove decl, never used.

	* tp.c (download_game_module): New function, split out from
	download_to_player.
	(broadcast_game_module): New function.
	(broadcast_variants_chosen, broadcast_players_assigned): New
 	functions.
	(receive_packet): Don't do trial assignments here, interpret
	'a' and 'v' packets.

	* tkconq.tcl (selected_game_title): Init to a default value.
	* tkmain.c (tk_start_new_game): Broadcast game module to other
	programs.
	(tk_launch_game): Broadcast that variants have been chosen.
	(tk_launch_game_2): Broadcast that players have been assigned.
	(last_stage): New global.
	(check_network): Call tcl commands to move dialogs through
	stages of game setup.
----------------------------
revision 1.5
date: 1999/08/19 12:49:19;  author: shebs;  state: Exp;  lines: +7 -13
        * run.c (run_local_ai): Comment out plan update and emergency
        handling code, need to refigure how to do.
        (run_game): Add execute_plan result to planexecs.
        * plan.c (execute_plan): Return number of plan executions.
        * task.c: Tweak comments.
----------------------------
revision 1.4
date: 1999/08/17 12:29:42;  author: shebs;  state: Exp;  lines: +141 -141
        Eliminate more compiler warnings.
        * unit.h (ActionDefn dofn, checkfn): Remove fields.
        * actions.c (execute_action): Dispatch on action type directly,
        instead of using checkfn and dofn fields.
        * actions.c, init.c, task.c: Remove unused vars.
        * game.h, skelconq.c, unit.h: Convert to pure standard C
        * kernel.h: Move decls of attack_can_damage_or_capture, etc.
        * misc.h: Remove decl of getenv.
        * obstack.h, obstack.c: Prototype fn argument of obstack_begin.
        * plan.c: Make static vars extern.
        (find_closest_unit): Prototype fn argument.
----------------------------
revision 1.3
date: 1999/07/03 12:44:08;  author: ronne;  state: Exp;  lines: +19 -112
Clean up file, remove old change markers.
----------------------------
revision 1.2
date: 1999/06/01 19:40:04;  author: shebs;  state: Exp;  lines: +386 -16
Tue Jun  1 18:41:59 1999  Hans Ronne  <ronne@bmc.uu.se>
	* combat.c, conq.h, game.h, help.c, init.c, keyword.def,
 	mkunits.c, move.c, mplayer.c, plan.def, read.c, run.c, run2.c,
 	score.c, side.h, supply.c, table.def, ui.c, unit.c, unit.h,
 	utype.def, world.c, world.h, write.c, maccmd.c, maccolors.c,
 	macconq.h, macdefs.h, macdraw.c, macinit.c. maclist.c, macmap.c,
 	macmenus.c, macmouse.c, macprefs.c, macrow.c. macwins.c: Remove
 	old change markers.
	* actions.c (transfer_supply): Disable use of indepside treasury.
	(do_create_in_action): Make separate call to has_advance_to_build.
	(do_create_in_action): Use the builders stash of cps if allowed.
	(do_create_in_action): Fix null side treasury crashes.
	(check_create_common): Make separate call to has_advance_to_build.
	(check_create_common): Fix null side treasury crashes.
	(set_created_unit_props): Turn on automation for indeps & AI
 	controlled sides.
	(do_create_at_action): Make separate call to has_advance_to_build.
	(do_create_at_action): Use the builders stash of cps if allowed.
	(do_create_at_action): Fix null side treasury crashes.
	(make_unit_complete): Fix null actionvector crashes at turn zero.
	(do_transfer_part_action): Make separate call to
 	has_advance_to_build.
	(check_change_type_action): Add separate call to
 	has_advance_to_build.
	* ai.c (numaitypes): Move to config.h to make it globally
 	accessible.
	(set_side_ai): Turn on automation for indeps & AI controlled
 	sides.
	(ai_update_plan): New function.
	(goal_truth): Handle GOAL_UNIT_OCCUPIED and GOAL_COLONIZE.
	(ai_init_shared): Call set_u_is_ground_mobile etc.
	(ai_init_shared): Set u_colonizer.
	(ai_init_shared): Call set_u_offensive_worth etc.
	(ai_init_shared): Set u_naval_mobile, u_ground_mobile and
 	u_facility.
	(offensive_worth): New function.
	(defensive_worth): New function.
	(exploring_worth): New function.
	(colonizing_worth): New function.
	(facility_worth): New function.
	(siege_worth): New function.
	(random_worth): New function.
	(set_u_offensive_worth): New function.
	(set_u_defensive_worth): New function.
	(set_u_explorer_worth): New function.
	(set_u_colonizer_worth): New function.
	(set_u_facility_worth): New unction.
	(set_u_random_worth): New function.
	(set_u_siege_worth): New function.
	(set_u_is_ground_mobile): New function.
	(set_u_is_naval_mobile): New function.
	(set_u_is_air_mobile): New function.
	(set_u_is_advanced): New function.
	(set_u_is_colonizer): New function.
	(set_u_is_facility): New function.
	* ai.h (a_ai_op): Add (*to_update_plan).
	(ai_update_plan): Prototype new function.
	(offensive_worth, defensive_worth, etc): New prototype.
	* combat.c (do_overrun_action): Make ovverun after fire possible.
	(check_overrun_action): Make overrun after fire & into empty cell
 	possible.
	(do_fire_at_action): Use SideMask code to handle fire display.
	(do_fire_at_action): Permit attempt to capture after fire from
 	adjacent cell.
	(do_fire_into_action): Use SideMask code to handle fire display.
	(maybe_hit_unit): Support uu_cellwide_protection_against.
	(maybe_hit_unit): Support uu_cellwide_protection_for.
	(maybe_hit_unit): Use SideMask code to handle hit display.
	(maybe_hit_unit): Fix occupant recursion bug.
	(attempt_to_capture_unit): Support uu_cellwide_protection_against.
	(attempt_to_capture_unit): Support uu_cellwide_protection_for.
	(detonate_on_cell): Use for_all_stack_with_occs instead of
 	for_all_stack.
	(can_capture_directly): New function.
	(type_can_capture_directly): New function.
	(type_can_carry): New function.
	(occ_can_defend_transport): New function.
	* config.h (MAXATYPES): Increase to 254.
	(numaitypes): Move here from ai.c to make it globally accessible.
	* conq.h (advanced_utypes etc): Remove.
	(numadv etc): Remove.
	(can_extract_at): Prototype.
	(can_load_at): Prototype.
	(can_capture_directly): Prototype.
	(type_can_capture_directly): Prototype.
	(type_can_carry): Prototype.
	(occ_can_defend_transport): Prototype.
	(has_advance_to_build): Prototype.
	(unit_actually_visible): New prototype.
	* game.h (for_all_advanced_utypes, etc): Remove.
	* goal.def (GOAL_UNIT_OCCUPIED, GOAL_COLONIZE): New goals.
	* gvar.def (g_default_runlength): New name for
 	g_ai_build_runlength.
	(g_disable_standard_economy): New gvar.
	(g_disband_unfinished_units): New gvar.
	(g_salvage_unfinished_cps): New gvar.
	(g_salvage_unfinished_materials): New gvar.
	(g_ai_advanced_unit_separation): New gvar.
	(g_ai_badtask_remove_chance): New gvar.
	(g_ai_badtask_max_retries): New gvar.
	(g_ai_badtask_reserve_chance): New gvar.
	(g_units_may_go_into_reserve): New gvar.
	(g_units_may_go_to_sleep): New gvar.
	* help.c (may_detonate): Prototype.
	(describe_utype): Make display of Material Handling conditional.
	(describe_utype): Add "None" option to required advances code.
	(u_property_desc, etc): Add spaces after commas to permit new
 	lines.
	(append_help_phrase): Add more dashes and an extra linefeed.
	* imf.c (interp_image): Disable palette run warning on the Mac.
	* init.c (advanced_utypes etc): Remove.
	(final_init): Remove call to setup_utype_vectors.
	(setup_utype_vectors): Remove function.
	* kernel.h (go_after_captive): New prototype.
	(attack_can_damage_or_capture): New prototype.
	(fire_can_damage_or_capture): New prototype.
	(real_capture_chance): New prototype.
	* keyword.def (K_AUTOPLAN): New keyword.
	(K_CP_STASH): New keyword.
	* kpublic.h (net_resume_build_task): New extern prototype.
	* mac.c: Include MacTypes.h ifdef NEW_HEADERS, else include
 	Types.h.
	* mkunits.c (make_countries): Add separate call to
 	has_advance_to_build.
	(place_unit): Add separate call to has_advance_to_build.
	* move.c (do_move_action): Fix u2->nu2 typo & remove nu2
 	declaration.
	(do_enter_action): Fix u2->nu2 typo & remove nu2 declaration.
	* mplayer.c: Include kernel.h.
	(assign_to_defend_unit): Prototype new function.
	(assign_to_defend_cell): Prototype new function.
	(assign_to_defend_vicinity): Prototype new function.
	(mplayer_update_plan): Prototype new function.
	(defended_by_occupants): Prototype new function.
	(mplayer_ops): Add mplayer_update_plan.
	(update_unit_plans_randomly): Support g_units_may_go_into_reserve.
	(update_unit_plans_randomly): Support g_units_may_go_to_sleep.
	(mplayer_decide_plan): Skip for advanced units.
	(mplayer_decide_plan): Use u_colonizer_worth instead of
 	u_colonizer.
	(mplayer_update_plan): New function.
	(need_this_type_to_build_explorers): Check that we can build the
 	desired type.
	(assign_to_colonize): Rewrite. Use GOAL_COLONIZE and
 	PLAN_COLONIZING.
	(assign_to_improve): Clear task agenda and set NULL goal.
	(type_can_build_attackers): Check that we can build the desired
 	type.
	(type_can_build_colonizers): Add separate call to
 	has_advance_to_build.
	(type_can_build_colonizers): Use u_colonizer_worth instead of
 	u_colonizer.
	(preferred_build_type): Also count enemy occs by using
 	for_all_stack_with_occs.
	(preferred_build_type): Add separate call to has_advance_to_build.
	(preferred_build_type): Use u_colonizer_worth instead of
 	u_colonizer.
	(defended_by_occupants): New function.
	(assign_to_defense): Rewrite. Handle defense of units.
	(assign_to_defend_unit): New function.
	(assign_to_defend_cell): New function.
	(assign_to_defend_vicinity): New function.
	(assign_to_defend_theater): New function.
	(mplayer_adjust_plan): Skip for advanced units.
	(mplayer_adjust_plan): Add PLAN_COLONIZING & PLAN_IMPROVING.
	(mplayer_adjust_plan): Support g_units_may_go_into_reserve.
	(build_base_for_self): Check that we can build the desired type.
	(build_base_for_others): Check that we can build the desired type.
	(build_depot_for_self): Check that we can build the desired type.
	(rethink_plan): Support g_units_may_go_into_reserve.
	* plan.c: (execute_plan): Skip for advanced units.
	(execute_plan): Mark obsolete try code.
	(execute_plan): Support g_units_may_go_into_reserve.
	(execute_plan): Call ai_update_plan before execution.
	(plan_offense): Handle GOAL_UNIT_OCCUPIED and GOAL_CELL_OCCUPIED.
	(plan_offense): Support g_units_may_go_into_reserve.
	(plan_offense): Support g_units_may_go_to_sleep.
	(self_build_base_for_self): Check that we can build the desired
 	type.
	(plan_offense_support): Check that we can build the desired type.
	(plan_defense): Handle GOAL_UNIT_OCCUPIED and GOAL_CELL_OCCUPIED.
	(plan_defense): Call go_after_victim also for unit that can fire.
	(plan_defense): Use u_ai_tactical_range.
	(plan_defense): Support g_units_may_go_into_reserve.
	(plan_colonize): Rewrite. Use GOAL_COLONIZE.
	(plan_colonizer_support): Add separate call to
 	has_advance_to_build (2 times).
	(plan_colonizer_support): Use u_colonizer_worth instead of
 	u_colonizer.
 	(plan_improve): Add separate call to has_advance_to_build (2
 	times).
 	(good_cell_to_colonize): Rewrite. Check for presence of other
 	unit.  Check size goal for ALL advanced utypes. Remove check for
 	nearby enemy units.
	(plan_exploration): Support g_units_may_go_into_reserve.
	(plan_exploration): Handle GOAL_UNIT_OCCUPIED and
 	GOAL_CELL_OCCUPIED.
	(plan_exploration): Support g_units_may_go_to_sleep.
	(plan_explorer_support): Check that we can build the desired type.
	(victim_here): Also count with damage by fire and damage to occs.
	(victim_here): Give large size units higher rating.
	(victim_here): Give independent units lower rating.
	(victim_here): Give units that threaten our advanced units higher
 	rating.
	(go_after_captive): New function.
	(target_here): Also count with damage by fire and damage to occs.
	(target_here): Give large size units higher rating.
	(target_here): Give independent units lower rating.
	(target_here): Give units that threaten our advanced units higher
 	rating.
 	(capture_indep_if_nearby): Use u_ai_tactical_range.
 	(capture_useful_if_nearby): Use u_ai_tactical_range.
	* read.c (interp_unit): Restore code where ids start at 1 instead
 	of 0.
	(interp_unit): Add K_CP_STASH & K_AUTOPLAN.
	* run.c (unit_plan_dialog): New extern prototype.
	(net_resume_build_task): New extern prototype.
	(has_advance_to_research): New prototype.
	(select_by_weight): Prototype extern.
	(unit_build_dialog): Change prototype so that it returns int.
	(has_advance_to_build): Remove prototype.
	(create_selected_unit): Remove function and prototype.
	(auto_pick_new_plan): New function and prototype.
	(set_new_build_task): Remove function and prototype.
	(run_advanced_units): Enable run_construction for UNIX again.
	(run_population): Fix indepside crashes.
	(run_construction): Completely rewritten & extensively debugged.
	(auto_pick_new_research): Rewrite so that random task is picked.
	(auto_pick_new_build_task): Rewrite. Call auto_pick_new_plan.
	(auto_pick_new_plan): New function.
	* run2.c (vary_winds): Prototype.
	(update_area_display): Prototype extern.
	(run_turn_start): Check g_disable_standard_economy.
	* side.c (update_area_display): Prototype extern.
	(create_side): Fix toggle AI bug by initializing
 	newside->prefixarg.
	(side_controls_unit): Give debuggers full control.
	(side_sees_unit): Include trusted side, debuggers, g_peek_at_enemy
 	and endofgame.
	* side.h (has_advance): Fix null side crashes.
	* table.def (uu_builder_can_reuse_cp): New table.
	(uu_cellwide_protection_against): New table.
	(uu_cellwide_protection_for): New table.
	* task.c (attack_can_damage_or_capture): Move prototype to
 	kernel.h.
	(do_hit_unit_task): Count with fire and capture at pointblank
 	range.
	(do_hit_unit_task): Fix firing range bug.
	(do_hit_unit_task): Move in to capture if unit is undefended.
	(attack_can_damage_or_capture): Do attack if occ can be damaged.
	(fire_can_damage): Do attack if occ can be damaged.
	(fire_can_damage_or_capture):New function.
	(real_capture_chance): New function.
	(execute_task): Support g_ai_badtask_remove_chance.
	(execute_task): Support g_ai_badtask_max_retries.
	(execute_task): Support g_ai_badtask_reserve_chance.
	(execute_task): Support g_units_may_go_into_reserve.
	(set_build_task): Rewrite. Optionally disband any salvage
 	unfinished unit.
	(push_build_task): Rewrite. Optionally disband any salvage
 	unfinished unit.
	(set_occupy_task): New function.
	* tp.c (net_resume_build_task): New function (prototyped in
 	kpublic.h).
	* ui.c: Include MacTypes.h ifdef NEW_HEADERS, else include
 	Types.h.
	(xform_cell): Move core calculations to new function
 	xform_cell_flat.
	(xform_cell_flat): New function.
	(xform_cell_fractional_flat): New function.
	(favored_type): Check that we can build the desired type.
	* ui.h (xform_cell_flat, xform_cell_fractional_flat): New
 	prototypes.
	* unit.c (default_size): Change from 0 to 1.
	(has_advance_to_build): Remove prototype.
	(create_unit): Initialize unit->autoplan.
	(create_unit): Initialize unit->cp_stash.
	(can_carry): Check for u_facility_total_max & u_mobile_total_max.
	(type_can_occupy): Check for u_facility_total_max &
 	u_mobile_total_max.
	(type_allowed_on_side): Remove call to has_advance_to_build.
	(set_unit_side): Turn on autobuild & autoresearch if side is under
 	AI control.
	* unit.h (a_unit): Add unit->cp_stash.
	(a_unit): Add unit->autoplan.
	(for_all_occs_with_occs): Define new macro.
	(type_ever_available): Prototype extern.
	* utype.def (u_offensive_worth): New utype property.
	(u_defensive_worth): New utype property.
	(u_explorer_worth): New utype property.
	(u_colonizer_worth): New utype property.
	(u_facility_worth): New utype property.
	(u_random_worth): New utype property.
	(u_siege_worth): New utype property.
	(u_offensive): Change default from 1 to 0.
	(u_explorer): Change default from 1 to 0.
	(u_besieger): New utype property.
	(u_ship): New utype property.
	(u_ground): New utype property.
	(u_air): New utype property.
	(u_facility_total_max): New utype property.
	(u_mobile_total_max): New utype property.
	(u_ai_min_defenders) : Ner utype property.
	(u_ai_tactival_range): New utype property.
	* world.c (latlong_to_xy): Fix meridian drawing bug.
	* world.h (cell_is_within_n_steps): Rename to
 	cell_is_within_range.
	(for_all_cells_within_n_steps): Rename to
 	for_all_cells_within_range.
	(for_all_stack_with_occs): Define new macro.
	* write.c (write_area_users): Change so that nextid starts at 1
 	instead of 0.
	(write_units): Restore old code so that nextid starts at 1 instead
 	of 0.
	(write_unit_properties): Add K_AUTOPLAN & K_CP_STASH.
	* macadv.c: (MAX_DISPLAYED_FACS): New macro constant.
	(MAX_DISPLAYED_OCCS): New macro constant.
	(CLEAR_AGENDA): New macro constant.
	(unit_build_dialog): Change prototype.
	(has_advance_to_build): Remove prototype.
	(create_selected_unit): Remove prototype.
	(copy_rect_from_gworld): New function and prototype.
	(city_dialog): Rewrite. Many bug fixes and improvements.
	Most important ones:  Add conditional call to draw_unit_info.
	Use backcolor to draw region outside the area in the city map.
	Use copy_rect_from_gworld to do the offscreen graphics.
	Disable all auto checkboxes when dside is under AI control.
	Check that unit has a plan. Add new Plan Type popup menu.
	Add new Autoplan checkbox. Add new AI control checkbox.
	Split occupant panel into facilities and garrison panels.
	Fix runlength bug and limit it to CLEAR_AGENDA.
	Call net_clear_task_agenda & net_set_unit_asleep for idle units.
	Add separate call to has_advance_to_build.
	(draw_city_statistics): Rewrite. Many bug fixes and improvements.
	Most important ones: Add drawing of unit icon.
	Fix sporadic name bug by call to side_adjective.
	Fix parenthesis bug in construction status field.
	Fix crashing bug in occupant display code.
	Use u_facility_worth instead of !mobile to identify facilities.
	Add AI control info text field.	 Add new facilities and garrison
	panels.
	Fix bugs in construction status.
	Use white background color with unit icons.
	Add cps to occupant names when debugging.
	(draw_landuse_near_unit): Rename macro to for_all_cells_within_range.
	(unit_build_dialog): Rewrite. Many bug fixes. return int instead
	of *unit.
	Add separate call to has_advance_to_build.
	(unit_plan_dialog): New function and prototype.
	(global_advance_dialog): Fix autoresearch bug.
	Fix crashes due to incorrect oldprojects[] array size.
	Move SetPort call to position after conditional return.
	Fix sporadic name bug by two calls to side_adjective.
	* maccmd.c (do_set_view_angle): Only set vertscale if given a
 	valid prefixarg.
	* maccolors.c (default_draw_ai): Initialize to TRUE.
	(alert_256_colors): Initialize to TRUE.
	* macconq.c (main): Move check_screen_depths after get files and
 	make conditional.
	(update_area_display): Prototype extern. Add Side parameter.
	* macconq.h: Include MacWindows.h ifdef NEW_HEADERS, else include
 	Windows.h.
	(a_map): Add map->draw_ai.
	(default_draw_ai): New extern.
	(alert_256_colors): New extern.
	(xform_fractional): Move prototype here.
	(xform_flat): New prototype.
	(xform_fractional_flat): New prototype.
	* macdefs.h: (mPlanTypePopup): New menu.
	(miPlanTypeColonizing): New menu item.
	(miPlanTypeImproving): New menu item.
	(miPlanTypeRandom): New menu item.
	(diPrefsAIRegions): New dialog item.
	(diPrefs256colors): New dialog item.
	(dCity): All dialog items renumbered and renamed.
	(dPlan): New dialog with 3 dialog items.
	* macdraw.c (draw_unit_image): Rewrite. Support sidecolors in
 	closeups etc.
	(draw_unit_image): Restore colors BEFORE calling gray_out_rect (2
 	times).
	(draw_unit_image): Fix emblem bug due to new emblem_position code.
	* maclist.c (create_list): Use GetNewCWindow if hasColorQD.
	(draw_unit_list_entry): Fix task_desc prototype error.
	* macmap.c (xform_fractional): Move prototype to macconq.h.
	(xform_flat): New function.
	(xform_fractional_flat): New function.
	(adjust_latlong_interval): New function and prototype.
	(create_map): Use default_draw_ai.
	(create_map): Call adjust_latlong_interval.
	(set_map_power): Call adjust_latlong_interval.
	(set_map_angle): Compute a suitable vertscale.
	(draw_meridians): Fix sporadic longitude top error.
	(draw_meridians): Call xform_fractional_flat instead of
 	xform_fractional.
	(draw_selections_at): Fix (x,y) bug.
	(draw_selected_unit): Draw enemy units in red.
	(draw_selection_animation): Draw enemy units in red.
	(update_cell): Make DestRect larger to include row below.
	(update_cell): Use UNWRAP_RECT for meridians & feature names.
	* macmenus.c: (all_ai_ops): Prototype extern for use in
 	build_ai_type_menu.
	(query_position_modally): Unselect all selected units outside our
 	control.
	(do_closeup_mi): Prototype extern for use in ctrl-clicking of
 	unit.
	(build_ai_type_menu): Load AIs dynamically to the menu.
	(do_menu_command): Add support for dynamically loaded AIs.
	(do_menu_command): Support PLAN_COLONIZING & PLAN_IMPROVING.
	(apply_to_all_selected): Don't apply to selected units that we
 	don't control.
	(do_closeup_mi): Remove static declaration.
	(adjust_menus): Add support for dynamically loaded AIs.
	(adjust_menus): Don't enable commands for enemy unit closeups.
	(enable_commands_for_unit): Support PLAN_COLONIZING &
 	PLAN_IMPROVING.
	(enable_commands_for_unit): Fix menu number bug that disables More
 	menu items.
	* macmouse.c (do_closeup_mi): Prototype extern for use in
 	ctrl-clicking of unit.
	(do_mouse_down_map_content): Disable move and fire cmds for
 	selected enemy units.
	(do_mouse_down_map_content): Rewrite ctrl-clicking code using
 	side_sees_unit.  Call do_closeup_mi if ctrl-clicking non-advanced
 	unit, else call city_dialog.
	(select_all_units_in_rect): Always permit this if side_sees_unit.
	* macprefs.c (interp_mac_ui_data): Support default_draw_ai &
 	alert_256_colors.
	(ui_update_state): Support default_draw_ai & alert_256_colors.
	(set_preferences): Add case diPrefsAIRegions & diPrefs256colors.
	(set_preferences): Support default_draw_ai & alert_256_colors.
	(add_preferences_topic_items): Support default_draw_ai &
 	alert_256_colors.
	* macrow.c (draw_cliffs): Fix ouside-area crashes.
	(draw_contours): Trigger unwrapping 1 hex from right edge.
	(draw_gridlines): Trigger unwrapping 1 hex from right edge.
	(draw_shorelines): Trigger unwrapping 1 hex from right edge.
	(draw_feature_boundary_simple): Trigger unwrapping 1 hex from
 	right edge.
	* macwins.c (closeupwinwid): Change to 340.
	(init_construction_lists): Add separate call to
 	has_advance_to_build.
	(adjust_construction_controls): Check that we can build the
 	desired type.
	(side_rename_dialog): Fix colorscheme bug.
	(preferred_closeup_size): Add 4 pixels at bottom.
	(draw_unit_closeup): Make sure this is the selected unit on all
 	maps.
	(draw_unit_closeup): Optionally permit peeking at enemy units.
	(draw_unit_closeup): Fix duplicate goal_desc problem.
	(draw_unit_closeup): Align goal_desc and remove flanking junk.
	(draw_unit_closeup): Align task_desc and write "Task".
	(do_mouse_down_unit_closeup): Make sure this is the selected unit
 	on all maps.
	(destroy_unit_closeup): Make sure this is the selected unit on all
 	maps.
	* XconqProj.rsrc: (DITL 803 "City"): Extensively modified.
	(DITL 702 "Preferences Map Items"): Add AI regions checkbox.
	(DITL 704 "Preferences Offscreen Items"): Add recommend 256 colors
 	checkbox.
	(DITL 804 "City Research"): Minor changes.
	(DITL 805 "Global Science"): Minor changes.
	(DITL 807 "City Build"): Minor changes.
	(DITL 808 "City Plan"): New dialog item list.
	(DLOG 808 "City Plan"): New dialog.
	(MENU 206 "AI Types"): Remove static AI items.
	(MENU 249 "Plan Types"): Restore damaged resource. Add 3 new
 	items.
	* Xconq.r: Update from XconqProj.rsrc.
	* xconq.c (unit_build_dialog): Rewrite. Fix argument error.
	(unit_plan_dialog): New function.
----------------------------
revision 1.1
date: 1999/04/28 19:36:33;  author: shebs;  state: Exp;
Initial checkin.
=============================================================================
